(ApiAst.Api (
   (Some "/* tox.h\n *\n * The Tox public API.\n *\n *  Copyright (C) 2013 Tox project All Rights Reserved.\n *\n *  This file is part of Tox.\n *\n *  Tox is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  Tox is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with Tox.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n#ifndef TOX_H\n#define TOX_H\n\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif"),
   [(ApiAst.Decl_Section
       [ApiAst.Cmtf_Break;
         (ApiAst.Cmtf_Doc
            " `tox.h` SHOULD *NOT* BE EDITED MANUALLY \226\128\147 any changes should be made to   *");
         ApiAst.Cmtf_Break;
         (ApiAst.Cmtf_Doc
            " `tox.api.h`, located in `toxcore/`. For instructions on how to            *");
         ApiAst.Cmtf_Break;
         (ApiAst.Cmtf_Doc
            " generate `tox.h` from `tox.api.h` please refer to `docs/apidsl.md`        *")
         ]);
     (ApiAst.Decl_Comment (
        (ApiAst.Cmt_Doc
           [(ApiAst.Cmtf_Doc " \\page core Public core API for Tox clients.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " Every function that can fail takes a function-specific error code pointer");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " that can be used to diagnose problems with the Tox state or the function");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " arguments. The error code pointer can be NULL, which does not influence the");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " function's behaviour, but can be done if the reason for failure is irrelevant");
             ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " to the client.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " The exception to this rule are simple allocation functions whose only failure");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " mode is allocation failure. They return NULL in that case, and do not set an");
             ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " error code.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " Every error code type has an OK value to which functions will set their error");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " code value on success. Clients can keep their error code uninitialised before");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " passing it to a function. The library guarantees that after returning, the");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " value pointed to by the error code pointer has been initialised.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " Functions with pointer parameters often have a NULL error code, meaning they");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " could not perform any operation, because one of the required parameters was");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " NULL. Some functions operate correctly or are defined as effectless on NULL.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " Some functions additionally return a value outside their");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " return type domain, or a bool containing true on success and false on");
             ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " failure.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " All functions that take a Tox instance pointer will cause undefined behaviour");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc " when passed a NULL Tox pointer.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " All integer values are expected in host byte order.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " Functions with parameters with enum types cause unspecified behaviour if the");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " enumeration value is outside the valid range of the type. If possible, the");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " function will try to use a sane default, but there will be no error code,");
             ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " and one possible action for the function to take is to have no effect.");
             ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
             (ApiAst.Cmtf_Doc
                " Integer constants and the memory layout of publicly exposed structs are not");
             ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " part of the ABI.")]),
        (ApiAst.Decl_Comment (
           (ApiAst.Cmt_Doc
              [(ApiAst.Cmtf_Doc " \\subsection events Events and callbacks");
                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " Events are handled by callbacks. One callback can be registered per event.");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " All events have a callback function type named `tox_{event}_cb` and a");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " function to register it named `tox_callback_{event}`. Passing a NULL");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " callback will result in no callback being registered for that event. Only");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " one callback per event can be registered, so if a client needs multiple");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " event listeners, it needs to implement the dispatch functionality itself.");
                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " The last argument to a callback is the user data pointer. It is passed from");
                ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                (ApiAst.Cmtf_Var
                   [(ApiAst.Var_LName tox); (ApiAst.Var_LName iterate)]);
                (ApiAst.Cmtf_Doc " to each callback in sequence.");
                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " The user data pointer is never stored or dereferenced by any library code, so");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " can be any pointer, including NULL. Callbacks must all operate on the same");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " object type. In the apidsl code (tox.in.h), this is denoted with `any`. The");
                ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " `any` in ");
                (ApiAst.Cmtf_Var
                   [(ApiAst.Var_LName tox); (ApiAst.Var_LName iterate)]);
                (ApiAst.Cmtf_Doc
                   " must be the same `any` as in all callbacks. In C,");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " lacking parametric polymorphism, this is a pointer to void.");
                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " Old style callbacks that are registered together with a user data pointer");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " receive that pointer as argument when they are called. They can each have");
                ApiAst.Cmtf_Break;
                (ApiAst.Cmtf_Doc
                   " their own user data pointer of their own type.")
                ]),
           (ApiAst.Decl_Comment (
              (ApiAst.Cmt_Doc
                 [(ApiAst.Cmtf_Doc
                     " \\subsection threading Threading implications");
                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " It is possible to run multiple concurrent threads with a Tox instance for");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " each thread. It is also possible to run all Tox instances in the same thread.");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " A common way to run Tox (multiple or single instance) is to have one thread");
                   ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " running a simple ");
                   (ApiAst.Cmtf_Var
                      [(ApiAst.Var_LName tox); (ApiAst.Var_LName iterate)]);
                   (ApiAst.Cmtf_Doc " loop, sleeping for ");
                   (ApiAst.Cmtf_Var
                      [(ApiAst.Var_LName tox);
                        (ApiAst.Var_LName iteration_interval)]);
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " milliseconds on each iteration.");
                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " If you want to access a single Tox instance from multiple threads, access");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " to the instance must be synchronised. While multiple threads can concurrently");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " access multiple different Tox instances, no more than one API function can");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " operate on a single instance at any given time.");
                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " Functions that write to variable length byte arrays will always have a size");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " function associated with them. The result of this size function is only valid");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " until another mutating function (one that takes a pointer to non-const Tox)");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " is called. Thus, clients must ensure that no other thread calls a mutating");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " function between the call to the size function and the call to the retrieval");
                   ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " function.");
                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " E.g. to get the current nickname, one would write");
                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " \\code"); ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " ");
                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName size_t)]);
                   (ApiAst.Cmtf_Doc " length = ");
                   (ApiAst.Cmtf_Var
                      [(ApiAst.Var_LName tox); (ApiAst.Var_LName self);
                        (ApiAst.Var_LName name); (ApiAst.Var_LName size)]);
                   (ApiAst.Cmtf_Doc "(tox);"); ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " ");
                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName uint8_t)]);
                   (ApiAst.Cmtf_Doc " *name = malloc(length);");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " if (!name) abort();");
                   ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                   (ApiAst.Cmtf_Var
                      [(ApiAst.Var_LName tox); (ApiAst.Var_LName self);
                        (ApiAst.Var_LName name); (ApiAst.Var_LName get)]);
                   (ApiAst.Cmtf_Doc "(tox, name);"); ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " \\endcode"); ApiAst.Cmtf_Break;
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc " If any other thread calls ");
                   (ApiAst.Cmtf_Var
                      [(ApiAst.Var_LName tox); (ApiAst.Var_LName self);
                        (ApiAst.Var_LName name); (ApiAst.Var_LName set)]);
                   (ApiAst.Cmtf_Doc " while this thread is allocating");
                   ApiAst.Cmtf_Break;
                   (ApiAst.Cmtf_Doc
                      " memory, the length may have become invalid, and the call to");
                   ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                   (ApiAst.Cmtf_Var
                      [(ApiAst.Var_LName tox); (ApiAst.Var_LName self);
                        (ApiAst.Var_LName name); (ApiAst.Var_LName get)]);
                   (ApiAst.Cmtf_Doc " may cause undefined behaviour.")]),
              (ApiAst.Decl_Class (tox,
                 [(ApiAst.Decl_Comment (
                     (ApiAst.Cmt_Doc
                        [ApiAst.Cmtf_Break;
                          (ApiAst.Cmtf_Doc
                             " The Tox instance type. All the state associated with a connection is held");
                          ApiAst.Cmtf_Break;
                          (ApiAst.Cmtf_Doc
                             " within the instance. Multiple instances can exist and operate concurrently.");
                          ApiAst.Cmtf_Break;
                          (ApiAst.Cmtf_Doc
                             " The maximum number of Tox instances that can exist on a single network");
                          ApiAst.Cmtf_Break;
                          (ApiAst.Cmtf_Doc
                             " device is limited. Note that this is not just a per-process limit, since the");
                          ApiAst.Cmtf_Break;
                          (ApiAst.Cmtf_Doc
                             " limiting factor is the number of usable ports on a device.")
                          ]),
                     (ApiAst.Decl_Struct (this, [], []))));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: API version");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The major version number. Incremented when the API or ABI changes in an");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " incompatible way.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The function variants of these constants return the version number of the");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " library. They can be used to display the Tox library version or to check");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " whether the client is compatible with the dynamically linked version of Tox.")
                           ]),
                      (ApiAst.Decl_Const (VERSION_MAJOR, (ApiAst.E_Number 0)
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The minor version number. Incremented when functionality is added without");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " breaking the API or ABI. Set to 0 when the major version number is");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " incremented.")]),
                      (ApiAst.Decl_Const (VERSION_MINOR, (ApiAst.E_Number 0)
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The patch or revision number. Incremented when bugfixes are applied without");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " changing any functionality or API or ABI.")
                           ]),
                      (ApiAst.Decl_Const (VERSION_PATCH, (ApiAst.E_Number 5)
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " A macro to check at preprocessing time whether the client code is compatible");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " with the installed version of Tox.")
                           ]),
                      (ApiAst.Decl_Macro
                         (ApiAst.Macro
                            "#define TOX_VERSION_IS_API_COMPATIBLE(MAJOR, MINOR, PATCH)      \\\n  (TOX_VERSION_MAJOR == MAJOR &&                                \\\n   (TOX_VERSION_MINOR > MINOR ||                                \\\n    (TOX_VERSION_MINOR == MINOR &&                              \\\n     TOX_VERSION_PATCH >= PATCH)))"))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " A macro to make compilation fail if the client code is not compatible with");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " the installed version of Tox.")
                           ]),
                      (ApiAst.Decl_Macro
                         (ApiAst.Macro
                            "#define TOX_VERSION_REQUIRE(MAJOR, MINOR, PATCH)                \\\n  typedef char tox_required_version[TOX_IS_COMPATIBLE(MAJOR, MINOR, PATCH) ? 1 : -1]"))
                      ));
                   (ApiAst.Decl_Static
                      (ApiAst.Decl_Namespace (version,
                         [(ApiAst.Decl_Comment (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " Return whether the compiled library version is compatible with the passed");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc " version numbers.")]),
                             (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                                is_compatible,
                                [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                    major));
                                  (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                     minor));
                                  (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                     patch))
                                  ],
                                ApiAst.Err_None))
                             ))
                           ]
                         )));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " A convenience macro to call tox_version_is_compatible with the currently");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " compiling API version.")]),
                      (ApiAst.Decl_Macro
                         (ApiAst.Macro
                            "#define TOX_VERSION_IS_ABI_COMPATIBLE()                         \\\n  tox_version_is_compatible(TOX_VERSION_MAJOR, TOX_VERSION_MINOR, TOX_VERSION_PATCH)"))
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Numeric constants");
                        ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " The values of these are not part of the ABI. Prefer to use the function");
                        ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " versions of them for code that should remain compatible with future versions");
                        ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " of toxcore.");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The size of a Tox Public Key in bytes.")
                           ]),
                      (ApiAst.Decl_Const (PUBLIC_KEY_SIZE,
                         (ApiAst.E_Number 32)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The size of a Tox Secret Key in bytes.")
                           ]),
                      (ApiAst.Decl_Const (SECRET_KEY_SIZE,
                         (ApiAst.E_Number 32)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The size of a Tox address in bytes. Tox addresses are in the format");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " [Public Key (");
                           (ApiAst.Cmtf_Var
                              [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                           (ApiAst.Cmtf_Doc
                              " bytes)][nospam (4 bytes)][checksum (2 bytes)].");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The checksum is computed over the Public Key and the nospam value. The first");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " byte is an XOR of all the even bytes (0, 2, 4, ...), the second byte is an");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " XOR of all the odd bytes (1, 3, 5, ...) of the Public Key and nospam.")
                           ]),
                      (ApiAst.Decl_Const (ADDRESS_SIZE,
                         (ApiAst.E_Plus (
                            (ApiAst.E_Plus ((ApiAst.E_UName PUBLIC_KEY_SIZE),
                               (ApiAst.E_Sizeof uint32_t))),
                            (ApiAst.E_Sizeof uint16_t)))
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Maximum length of a nickname in bytes.")
                           ]),
                      (ApiAst.Decl_Const (MAX_NAME_LENGTH,
                         (ApiAst.E_Number 128)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Maximum length of a status message in bytes.")
                           ]),
                      (ApiAst.Decl_Const (MAX_STATUS_MESSAGE_LENGTH,
                         (ApiAst.E_Number 1007)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Maximum length of a friend request message in bytes.")
                           ]),
                      (ApiAst.Decl_Const (MAX_FRIEND_REQUEST_LENGTH,
                         (ApiAst.E_Number 1016)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Maximum length of a single message after which it should be split.")
                           ]),
                      (ApiAst.Decl_Const (MAX_MESSAGE_LENGTH,
                         (ApiAst.E_Number 1372)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Maximum size of custom packets. TODO(iphydf): should be LENGTH?")
                           ]),
                      (ApiAst.Decl_Const (MAX_CUSTOM_PACKET_SIZE,
                         (ApiAst.E_Number 1373)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The number of bytes in a hash generated by ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_LName hash)]);
                           (ApiAst.Cmtf_Doc ".")]),
                      (ApiAst.Decl_Const (HASH_LENGTH, (ApiAst.E_Number 32)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The number of bytes in a file id.")
                           ]),
                      (ApiAst.Decl_Const (FILE_ID_LENGTH,
                         (ApiAst.E_Number 32)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Maximum file name length for file transfers.")
                           ]),
                      (ApiAst.Decl_Const (MAX_FILENAME_LENGTH,
                         (ApiAst.E_Number 255)))
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Global enumerations");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Represents the possible statuses a client can have.")
                           ]),
                      (ApiAst.Decl_Enum (ApiAst.Enum_Class, USER_STATUS,
                         [(ApiAst.Enum_Name (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " User is online and available.")
                                  ]),
                             NONE, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " User is away. Clients can set this e.g. after a user defined");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " inactivity time.")]),
                              AWAY, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " User is busy. Signals to other clients that this client does not");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " currently wish to communicate.")
                                   ]),
                              BUSY, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " Represents message types for ");
                           (ApiAst.Cmtf_Var
                              [(ApiAst.Var_LName tox);
                                (ApiAst.Var_LName friend);
                                (ApiAst.Var_LName send);
                                (ApiAst.Var_LName message)]);
                           (ApiAst.Cmtf_Doc " and conference");
                           ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " messages.")]),
                      (ApiAst.Decl_Enum (ApiAst.Enum_Class, MESSAGE_TYPE,
                         [(ApiAst.Enum_Name (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " Normal text message. Similar to PRIVMSG on IRC.")
                                  ]),
                             NORMAL, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " A message describing an user action. This is similar to /me (CTCP ACTION)");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " on IRC.")]),
                              ACTION, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Error (alloc,
                      [(ApiAst.Enum_Name (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " The function failed to allocate enough memory for the data structure.")
                               ]),
                          MALLOC, None))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: Loading/saving of internal state");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_GetSet (
                      (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                         (ApiAst.Ss_LName size))),
                      savedata,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Calculates the number of bytes required to store the tox instance with");
                               ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                               (ApiAst.Cmtf_Var [(ApiAst.Var_LName get)]);
                               (ApiAst.Cmtf_Doc
                                  ". This function cannot fail. The result is always greater than 0.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @see threading for concurrency implications.")
                               ]),
                          (ApiAst.Decl_Function (ApiAst.Ty_Auto, size, 
                             [], ApiAst.Err_None))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Store all information associated with the tox instance to a byte array.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param savedata A memory region large enough to store the tox instance");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc "   data. Call ");
                                (ApiAst.Cmtf_Var [(ApiAst.Var_LName size)]);
                                (ApiAst.Cmtf_Doc
                                   " to find the number of bytes required. If this parameter");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   "   is NULL, this function has no effect.")
                                ]),
                           (ApiAst.Decl_Function (ApiAst.Ty_Auto, get, 
                              [], ApiAst.Err_None))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Static
                      (ApiAst.Decl_Class (saver,
                         [(ApiAst.Decl_Comment (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " Write an 8 bit unsigned integer.")
                                  ]),
                             (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                u08_cb,
                                [(ApiAst.Param ((ApiAst.Ty_LName uint8_t),
                                    value));
                                  (ApiAst.Param ((ApiAst.Ty_TVar any),
                                     user_data))
                                  ]
                                ))
                             ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Write a 16 bit unsigned integer.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 u16_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_LName uint16_t),
                                     value));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Write a 32 bit unsigned integer.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 u32_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                     value));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Write a 64 bit unsigned integer.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 u64_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_LName uint64_t),
                                     value));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Write an array of the given length. This call is followed by exactly");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " `elements` calls to other functions. Arrays may be nested, so each");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " element of the array may be another call to ");
                                   (ApiAst.Cmtf_Var
                                      [(ApiAst.Var_LName arr_cb)]);
                                   (ApiAst.Cmtf_Doc " with its own element");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " count and subsequent calls.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 arr_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_LName size_t),
                                     elements));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Write a list of key/value pairs. A call to this function is followed by");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " `elements * 2` calls to other functions. Every other call is either key");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " or value. Keys can be assumed to be unique.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 map_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_LName size_t),
                                     elements));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Write a byte array of a given length.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 bin_cb,
                                 [(ApiAst.Param (
                                     (ApiAst.Ty_Const
                                        (ApiAst.Ty_Array (
                                           (ApiAst.Ty_LName uint8_t),
                                           (ApiAst.Ss_LName length)))),
                                     data));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " This struct contains callbacks for the save function. You will probably");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " want to implement all callbacks to produce a useful result.")
                                   ]),
                              (ApiAst.Decl_Struct (this, [get; set],
                                 [(ApiAst.Decl_Member (
                                     (ApiAst.Ty_Pointer
                                        (ApiAst.Ty_LName u08_cb)),
                                     u08));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName u16_cb)),
                                      u16));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName u32_cb)),
                                      u32));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName u64_cb)),
                                      u64));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName arr_cb)),
                                      arr));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName map_cb)),
                                      map));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName bin_cb)),
                                      bin))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " Allocates a new ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object and initialises it with the default");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " handlers.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Objects returned from this function must be freed using the ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName free)]);
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " function.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " @return A new ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object with default options or NULL on failure.")
                                   ]),
                              (ApiAst.Decl_Static
                                 (ApiAst.Decl_Function (
                                    (ApiAst.Ty_Pointer (ApiAst.Ty_LName this)),
                                    new, [], (ApiAst.Err_From alloc))))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Releases all resources associated with a saver objects.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Passing a pointer that was not returned by ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName new)]);
                                   (ApiAst.Cmtf_Doc " results in");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " undefined behaviour.")]),
                              (ApiAst.Decl_Function ((ApiAst.Ty_LName void),
                                 free, [], ApiAst.Err_None))
                              ))
                           ]
                         )));
                   (ApiAst.Decl_Function ((ApiAst.Ty_LName void), save,
                      [(ApiAst.Param (
                          (ApiAst.Ty_Const
                             (ApiAst.Ty_Pointer (ApiAst.Ty_LName saver_t))),
                          saver));
                        (ApiAst.Param ((ApiAst.Ty_TVar any), user_data))],
                      ApiAst.Err_None));
                   (ApiAst.Decl_Static
                      (ApiAst.Decl_Class (loader,
                         [(ApiAst.Decl_Comment (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " Read an 8 bit unsigned integer.")
                                  ]),
                             (ApiAst.Decl_Typedef ((ApiAst.Ty_LName uint8_t),
                                u08_cb,
                                [(ApiAst.Param ((ApiAst.Ty_TVar any),
                                    user_data))
                                  ]
                                ))
                             ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Read a 16 bit unsigned integer.")
                                   ]),
                              (ApiAst.Decl_Typedef (
                                 (ApiAst.Ty_LName uint16_t), u16_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_TVar any),
                                     user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Read a 32 bit unsigned integer.")
                                   ]),
                              (ApiAst.Decl_Typedef (
                                 (ApiAst.Ty_LName uint32_t), u32_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_TVar any),
                                     user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Read a 64 bit unsigned integer.")
                                   ]),
                              (ApiAst.Decl_Typedef (
                                 (ApiAst.Ty_LName uint64_t), u64_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_TVar any),
                                     user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Read the an array length. This call is followed by exactly the returned");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " number calls to other functions.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName size_t),
                                 arr_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_TVar any),
                                     user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Read the length of the list of key/value pairs. A call to this function");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " is followed by twice the returned number of calls to other functions.");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Every other call is either key or value.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName size_t),
                                 map_cb,
                                 [(ApiAst.Param ((ApiAst.Ty_TVar any),
                                     user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Read a byte array of a given length.")
                                   ]),
                              (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                 bin_cb,
                                 [(ApiAst.Param (
                                     (ApiAst.Ty_Array (
                                        (ApiAst.Ty_LName uint8_t),
                                        (ApiAst.Ss_LName length))),
                                     data));
                                   (ApiAst.Param ((ApiAst.Ty_TVar any),
                                      user_data))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " This struct contains callbacks for the load function. You will probably");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " want to implement all callbacks to produce a useful result.")
                                   ]),
                              (ApiAst.Decl_Struct (this, [get; set],
                                 [(ApiAst.Decl_Member (
                                     (ApiAst.Ty_Pointer
                                        (ApiAst.Ty_LName u08_cb)),
                                     u08));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName u16_cb)),
                                      u16));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName u32_cb)),
                                      u32));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName u64_cb)),
                                      u64));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName arr_cb)),
                                      arr));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName map_cb)),
                                      map));
                                   (ApiAst.Decl_Member (
                                      (ApiAst.Ty_Pointer
                                         (ApiAst.Ty_LName bin_cb)),
                                      bin))
                                   ]
                                 ))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " Allocates a new ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object and initialises it with the default");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " handlers.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Objects returned from this function must be freed using the ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName free)]);
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " function.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " @return A new ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object with default options or NULL on failure.")
                                   ]),
                              (ApiAst.Decl_Static
                                 (ApiAst.Decl_Function (
                                    (ApiAst.Ty_Pointer (ApiAst.Ty_LName this)),
                                    new, [], (ApiAst.Err_From alloc))))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Releases all resources associated with a loader objects.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Passing a pointer that was not returned by ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName new)]);
                                   (ApiAst.Cmtf_Doc " results in");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " undefined behaviour.")]),
                              (ApiAst.Decl_Function ((ApiAst.Ty_LName void),
                                 free, [], ApiAst.Err_None))
                              ))
                           ]
                         )));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Startup options");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Type of proxy used to connect to TCP relays.")
                           ]),
                      (ApiAst.Decl_Enum (ApiAst.Enum_Class, PROXY_TYPE,
                         [(ApiAst.Enum_Name (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc " Don't use a proxy.")]),
                             NONE, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " HTTP proxy using CONNECT.")
                                   ]),
                              HTTP, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " SOCKS proxy for simple socket pipes.")
                                   ]),
                              SOCKS5, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Type of savedata to create the Tox instance from.")
                           ]),
                      (ApiAst.Decl_Enum (ApiAst.Enum_Class, SAVEDATA_TYPE,
                         [(ApiAst.Enum_Name (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc " No savedata.")]),
                             NONE, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Savedata is one that was obtained from ");
                                   (ApiAst.Cmtf_Var
                                      [(ApiAst.Var_LName savedata);
                                        (ApiAst.Var_LName get)]);
                                   (ApiAst.Cmtf_Doc ".")]),
                              TOX_SAVE, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Savedata is a secret key of length ");
                                   (ApiAst.Cmtf_Var
                                      [(ApiAst.Var_UName SECRET_KEY_SIZE)]);
                                   (ApiAst.Cmtf_Doc ".")]),
                              SECRET_KEY, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Severity level of log messages.")
                           ]),
                      (ApiAst.Decl_Enum (ApiAst.Enum_Class, LOG_LEVEL,
                         [(ApiAst.Enum_Name (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " Very detailed traces including all network activity.")
                                  ]),
                             TRACE, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Debug messages such as which port we bind to.")
                                   ]),
                              DEBUG, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Informational log messages such as video call status changes.")
                                   ]),
                              INFO, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Warnings about internal inconsistency or logic errors.")
                                   ]),
                              WARNING, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Severe unexpected errors caused by external or internal inconsistency.")
                                   ]),
                              ERROR, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This event is triggered when the toxcore library logs an internal message.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This is mostly useful for debugging. This callback can be called from any");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " function, not just ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_LName iterate)]);
                           (ApiAst.Cmtf_Doc
                              ". This means the user data lifetime must at");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " least extend between registering and unregistering it or ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_LName kill)]);
                           (ApiAst.Cmtf_Doc "."); ApiAst.Cmtf_Break;
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Other toxcore modules such as toxav may concurrently call this callback at");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " any time. Thus, user code must make sure it is equipped to handle concurrent");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " execution, e.g. by employing appropriate mutex locking.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param level The severity of the log message.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param file The source file from which the message originated.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param line The source line from which the message originated.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param func The function from which the message originated.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param message The log message.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param user_data The user data pointer passed to ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_LName new)]);
                           (ApiAst.Cmtf_Doc " in options.")]),
                      (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void), log_cb,
                         [(ApiAst.Param ((ApiAst.Ty_UName LOG_LEVEL), level));
                           (ApiAst.Param ((ApiAst.Ty_LName string), file));
                           (ApiAst.Param ((ApiAst.Ty_LName uint32_t), line));
                           (ApiAst.Param ((ApiAst.Ty_LName string), func));
                           (ApiAst.Param ((ApiAst.Ty_LName string), message));
                           (ApiAst.Param ((ApiAst.Ty_TVar any), user_data))]
                         ))
                      ));
                   (ApiAst.Decl_Static
                      (ApiAst.Decl_Class (options,
                         [(ApiAst.Decl_Comment (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " This struct contains all the startup options for Tox. You can either");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " allocate this object yourself, and pass it to ");
                                  (ApiAst.Cmtf_Var
                                     [(ApiAst.Var_LName default)]);
                                  (ApiAst.Cmtf_Doc ", or call ");
                                  (ApiAst.Cmtf_Var [(ApiAst.Var_LName new)]);
                                  (ApiAst.Cmtf_Doc " to get");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " a new default options object.");
                                  ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " If you allocate it yourself, be aware that your binary will rely on the");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " memory layout of this struct. In particular, if additional fields are added");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " in future versions of the API, code that allocates it itself will become");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc " incompatible.");
                                  ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " @deprecated The memory layout of this struct (size, alignment, and field");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " order) is not part of the ABI. To remain compatible, prefer to use ");
                                  (ApiAst.Cmtf_Var [(ApiAst.Var_LName new)]);
                                  (ApiAst.Cmtf_Doc " to"); ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " allocate the object and accessor functions to set the members. The struct");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " will become opaque (i.e. the definition will become private) in v0.1.0.")
                                  ]),
                             (ApiAst.Decl_Struct (this, [get; set],
                                [(ApiAst.Decl_Comment (
                                    (ApiAst.Cmt_Doc
                                       [ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " The type of socket to create.");
                                         ApiAst.Cmtf_Break;
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " If this is set to false, an IPv4 socket is created, which subsequently");
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " only allows IPv4 communication.");
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " If it is set to true, an IPv6 socket is created, allowing both IPv4 and");
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " IPv6 communication.")
                                         ]),
                                    (ApiAst.Decl_Member (
                                       (ApiAst.Ty_LName bool), ipv6_enabled))
                                    ));
                                  (ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Enable the use of UDP communication when available.");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Setting this to false will force Tox to use TCP only. Communications will");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " need to be relayed through a TCP relay node, potentially slowing them down.");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Disabling UDP support is necessary when using anonymous proxies or Tor.")
                                          ]),
                                     (ApiAst.Decl_Member (
                                        (ApiAst.Ty_LName bool), udp_enabled))
                                     ));
                                  (ApiAst.Decl_Namespace (proxy,
                                     [(ApiAst.Decl_Comment (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " Pass communications through a proxy.")
                                              ]),
                                         (ApiAst.Decl_Member (
                                            (ApiAst.Ty_UName PROXY_TYPE),
                                            type))
                                         ));
                                       (ApiAst.Decl_Comment (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The IP address or DNS name of the proxy to be used.");
                                               ApiAst.Cmtf_Break;
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " If used, this must be non-NULL and be a valid DNS name. The name must not");
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " exceed 255 characters, and be in a NUL-terminated C string format");
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " (255 chars + 1 NUL byte).");
                                               ApiAst.Cmtf_Break;
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " This member is ignored (it can be NULL) if ");
                                               (ApiAst.Cmtf_Var
                                                  [(ApiAst.Var_LName type)]);
                                               (ApiAst.Cmtf_Doc " is ");
                                               (ApiAst.Cmtf_Var
                                                  [(ApiAst.Var_UName
                                                      PROXY_TYPE);
                                                    (ApiAst.Var_UName NONE)]);
                                               (ApiAst.Cmtf_Doc ".");
                                               ApiAst.Cmtf_Break;
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The data pointed at by this member is owned by the user, so must");
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " outlive the options object.")
                                               ]),
                                          (ApiAst.Decl_Member (
                                             (ApiAst.Ty_LName string), host))
                                          ));
                                       (ApiAst.Decl_Comment (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The port to use to connect to the proxy server.");
                                               ApiAst.Cmtf_Break;
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " Ports must be in the range (1, 65535). The value is ignored if");
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc " ");
                                               (ApiAst.Cmtf_Var
                                                  [(ApiAst.Var_LName type)]);
                                               (ApiAst.Cmtf_Doc " is ");
                                               (ApiAst.Cmtf_Var
                                                  [(ApiAst.Var_UName
                                                      PROXY_TYPE);
                                                    (ApiAst.Var_UName NONE)]);
                                               (ApiAst.Cmtf_Doc ".")]),
                                          (ApiAst.Decl_Member (
                                             (ApiAst.Ty_LName uint16_t), port
                                             ))
                                          ))
                                       ]
                                     ));
                                  (ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The start port of the inclusive port range to attempt to use.");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " If both ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName start_port)]);
                                          (ApiAst.Cmtf_Doc " and ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName end_port)]);
                                          (ApiAst.Cmtf_Doc
                                             " are 0, the default port range will be");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " used: [33445, 33545].");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " If either ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName start_port)]);
                                          (ApiAst.Cmtf_Doc " or ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName end_port)]);
                                          (ApiAst.Cmtf_Doc
                                             " is 0 while the other is non-zero, the");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " non-zero port will be the only port in the range.");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " Having ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName start_port)]);
                                          (ApiAst.Cmtf_Doc " > ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName end_port)]);
                                          (ApiAst.Cmtf_Doc
                                             " will yield the same behavior as if ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName start_port)]);
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " and ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName end_port)]);
                                          (ApiAst.Cmtf_Doc " were swapped.")]),
                                     (ApiAst.Decl_Member (
                                        (ApiAst.Ty_LName uint16_t),
                                        start_port))
                                     ));
                                  (ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The end port of the inclusive port range to attempt to use.")
                                          ]),
                                     (ApiAst.Decl_Member (
                                        (ApiAst.Ty_LName uint16_t), end_port
                                        ))
                                     ));
                                  (ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The port to use for the TCP server (relay). If 0, the TCP server is");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " disabled.");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Enabling it is not required for Tox to function properly.");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " When enabled, your Tox instance can act as a TCP relay for other Tox");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " instance. This leads to increased traffic, thus when writing a client");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " it is recommended to enable TCP server only if the user has an option");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " to disable it.")
                                          ]),
                                     (ApiAst.Decl_Member (
                                        (ApiAst.Ty_LName uint16_t), tcp_port
                                        ))
                                     ));
                                  (ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Enables or disables UDP hole-punching in toxcore. (Default: enabled).")
                                          ]),
                                     (ApiAst.Decl_Member (
                                        (ApiAst.Ty_LName bool),
                                        hole_punching_enabled))
                                     ));
                                  (ApiAst.Decl_Namespace (savedata,
                                     [(ApiAst.Decl_Comment (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " The type of savedata to load from.")
                                              ]),
                                         (ApiAst.Decl_Member (
                                            (ApiAst.Ty_UName SAVEDATA_TYPE),
                                            type))
                                         ));
                                       (ApiAst.Decl_Comment (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The savedata.");
                                               ApiAst.Cmtf_Break;
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The data pointed at by this member is owned by the user, so must");
                                               ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " outlive the options object.")
                                               ]),
                                          (ApiAst.Decl_Member (
                                             (ApiAst.Ty_Const
                                                (ApiAst.Ty_Array (
                                                   (ApiAst.Ty_LName uint8_t),
                                                   (ApiAst.Ss_LName length)))),
                                             data))
                                          ));
                                       (ApiAst.Decl_Comment (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The length of the ");
                                               (ApiAst.Cmtf_Var
                                                  [(ApiAst.Var_LName data)]);
                                               (ApiAst.Cmtf_Doc " array.")]),
                                          (ApiAst.Decl_Member (
                                             (ApiAst.Ty_LName size_t), length
                                             ))
                                          ))
                                       ]
                                     ));
                                  (ApiAst.Decl_Namespace (log,
                                     [(ApiAst.Decl_Comment (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " Logging callback for the new tox instance.")
                                              ]),
                                         (ApiAst.Decl_Member (
                                            (ApiAst.Ty_Pointer
                                               (ApiAst.Ty_LName log_cb)),
                                            callback))
                                         ));
                                       (ApiAst.Decl_Comment (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " User data pointer passed to the logging callback.")
                                               ]),
                                          (ApiAst.Decl_Member (
                                             (ApiAst.Ty_TVar any), user_data
                                             ))
                                          ))
                                       ]
                                     ));
                                  (ApiAst.Decl_Namespace (load,
                                     [(ApiAst.Decl_Comment (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " An implementation of the loader interface specified in ");
                                              (ApiAst.Cmtf_Var
                                                 [(ApiAst.Var_LName loader_t)
                                                   ]);
                                              (ApiAst.Cmtf_Doc ".")]),
                                         (ApiAst.Decl_Member (
                                            (ApiAst.Ty_Const
                                               (ApiAst.Ty_Pointer
                                                  (ApiAst.Ty_LName loader_t))),
                                            callbacks))
                                         ));
                                       (ApiAst.Decl_Comment (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " User data pointer passed to each of the loader callbacks.")
                                               ]),
                                          (ApiAst.Decl_Member (
                                             (ApiAst.Ty_TVar any), user_data
                                             ))
                                          ))
                                       ]
                                     ))
                                  ]
                                ))
                             ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " Initialises a ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object with the default options.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " The result of this function is independent of the original options. All");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " values will be overwritten, no values will be read (so it is permissible");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " to pass an uninitialised object).");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " If options is NULL, this function has no effect.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param options An options object to be filled with default options.")
                                   ]),
                              (ApiAst.Decl_Function ((ApiAst.Ty_LName void),
                                 default, [], ApiAst.Err_None))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " Allocates a new ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object and initialises it with the default");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " options. This function can be used to preserve long term ABI compatibility by");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " giving the responsibility of allocation and deallocation to the Tox library.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Objects returned from this function must be freed using the ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName free)]);
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " function.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " @return A new ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName this)]);
                                   (ApiAst.Cmtf_Doc
                                      " object with default options or NULL on failure.")
                                   ]),
                              (ApiAst.Decl_Static
                                 (ApiAst.Decl_Function (
                                    (ApiAst.Ty_Pointer (ApiAst.Ty_LName this)),
                                    new, [], (ApiAst.Err_From alloc))))
                              ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Releases all resources associated with an options objects.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Passing a pointer that was not returned by ");
                                   (ApiAst.Cmtf_Var [(ApiAst.Var_LName new)]);
                                   (ApiAst.Cmtf_Doc " results in");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " undefined behaviour.")]),
                              (ApiAst.Decl_Function ((ApiAst.Ty_LName void),
                                 free, [], ApiAst.Err_None))
                              ))
                           ]
                         )));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Creation and destruction");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @brief Creates and initialises a new Tox instance with the options passed.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This function will bring the instance into a valid state. Running the event");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " loop with a new instance will operate correctly.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " If loading failed or succeeded only partially, the new or partially loaded");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " instance is returned and an error code is set.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param options An options object as described above. If this parameter is");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              "   NULL, the default options are used.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " @see ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_LName iterate)]);
                           (ApiAst.Cmtf_Doc " for the event loop.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @return A new Tox instance pointer on success or NULL on failure.")
                           ]),
                      (ApiAst.Decl_Static
                         (ApiAst.Decl_Function (
                            (ApiAst.Ty_Pointer (ApiAst.Ty_LName this)), new,
                            [(ApiAst.Param (
                                (ApiAst.Ty_Const
                                   (ApiAst.Ty_Pointer
                                      (ApiAst.Ty_LName options_t))),
                                options))
                              ],
                            (ApiAst.Err_List
                               [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL,
                                   None));
                                 (ApiAst.Enum_Name (
                                    (ApiAst.Cmt_Doc
                                       [ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " The function was unable to allocate enough memory to store the internal");
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " structures for the Tox object.")
                                         ]),
                                    MALLOC, None));
                                 (ApiAst.Enum_Name (
                                    (ApiAst.Cmt_Doc
                                       [ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " The function was unable to bind to a port. This may mean that all ports");
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " have already been bound, e.g. by other Tox instances, or it may mean");
                                         ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " a permission error. You may be able to gather more information from errno.")
                                         ]),
                                    PORT_ALLOC, None));
                                 (ApiAst.Enum_Namespace (PROXY,
                                    [(ApiAst.Enum_Name (
                                        (ApiAst.Cmt_Doc
                                           [ApiAst.Cmtf_Break;
                                             (ApiAst.Cmtf_Doc
                                                " proxy_type was invalid.")
                                             ]),
                                        BAD_TYPE, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " proxy_type was valid but the proxy_host passed had an invalid format");
                                              ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " or was NULL.")
                                              ]),
                                         BAD_HOST, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " proxy_type was valid, but the proxy_port was invalid.")
                                              ]),
                                         BAD_PORT, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " The proxy address passed could not be resolved.")
                                              ]),
                                         NOT_FOUND, None))
                                      ]
                                    ));
                                 (ApiAst.Enum_Namespace (LOAD,
                                    [(ApiAst.Enum_Name (
                                        (ApiAst.Cmt_Doc
                                           [ApiAst.Cmtf_Break;
                                             (ApiAst.Cmtf_Doc
                                                " The byte array to be loaded contained an encrypted save.")
                                             ]),
                                        ENCRYPTED, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " The data format was invalid. This can happen when loading data that was");
                                              ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " saved by an older version of Tox, or when the data has been corrupted.");
                                              ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " When loading from badly formatted data, some data may have been loaded,");
                                              ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " and the rest is discarded. Passing an invalid length parameter also");
                                              ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " causes this error.")
                                              ]),
                                         BAD_FORMAT, None))
                                      ]
                                    ))
                                 ])
                            )))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Releases all resources associated with the Tox instance and disconnects from");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " the network.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " After calling this function, the Tox pointer becomes invalid. No other");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " functions can be called, and the pointer value can no longer be read.")
                           ]),
                      (ApiAst.Decl_Function ((ApiAst.Ty_LName void), kill,
                         [], ApiAst.Err_None))
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: Connection lifecycle and event loop");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Sends a \"get nodes\" request to the given bootstrap node with IP, port, and");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " public key to setup connections.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This function will attempt to connect to the node using UDP. You must use");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " this function even if ");
                           (ApiAst.Cmtf_Var
                              [(ApiAst.Var_LName options);
                                (ApiAst.Var_LName this);
                                (ApiAst.Var_LName udp_enabled)]);
                           (ApiAst.Cmtf_Doc " was set to false.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param address The hostname or IP address (IPv4 or IPv6) of the node.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param port The port on the host on which the bootstrap Tox instance is");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc "   listening.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param public_key The long term public key of the bootstrap node");
                           ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc "   (");
                           (ApiAst.Cmtf_Var
                              [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                           (ApiAst.Cmtf_Doc " bytes)."); ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " @return true on success.")]),
                      (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                         bootstrap,
                         [(ApiAst.Param ((ApiAst.Ty_LName string), address));
                           (ApiAst.Param ((ApiAst.Ty_LName uint16_t), port));
                           (ApiAst.Param (
                              (ApiAst.Ty_Const
                                 (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                    (ApiAst.Ss_UName PUBLIC_KEY_SIZE)))),
                              public_key))
                           ],
                         (ApiAst.Err_List
                            [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL, None));
                              (ApiAst.Enum_Name (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " The address could not be resolved to an IP address, or the IP address");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc " passed was invalid.")
                                      ]),
                                 BAD_HOST, None));
                              (ApiAst.Enum_Name (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " The port passed was invalid. The valid port range is (1, 65535).")
                                      ]),
                                 BAD_PORT, None))
                              ])
                         ))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Adds additional host:port pair as TCP relay.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This function can be used to initiate TCP connections to different ports on");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " the same bootstrap node, or to add TCP relays without using them as");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " bootstrap nodes.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param address The hostname or IP address (IPv4 or IPv6) of the TCP relay.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param port The port on the host on which the TCP relay is listening.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param public_key The long term public key of the TCP relay");
                           ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc "   (");
                           (ApiAst.Cmtf_Var
                              [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                           (ApiAst.Cmtf_Doc " bytes)."); ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " @return true on success.")]),
                      (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                         add_tcp_relay,
                         [(ApiAst.Param ((ApiAst.Ty_LName string), address));
                           (ApiAst.Param ((ApiAst.Ty_LName uint16_t), port));
                           (ApiAst.Param (
                              (ApiAst.Ty_Const
                                 (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                    (ApiAst.Ss_UName PUBLIC_KEY_SIZE)))),
                              public_key))
                           ],
                         (ApiAst.Err_From bootstrap)))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Protocols that can be used to connect to the network or friends.")
                           ]),
                      (ApiAst.Decl_Enum (ApiAst.Enum_Class, CONNECTION,
                         [(ApiAst.Enum_Name (
                             (ApiAst.Cmt_Doc
                                [ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc
                                     " There is no connection. This instance, or the friend the state change is");
                                  ApiAst.Cmtf_Break;
                                  (ApiAst.Cmtf_Doc " about, is now offline.")
                                  ]),
                             NONE, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " A TCP connection has been established. For the own instance, this means it");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " is connected through a TCP relay, only. For a friend, this means that the");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " connection to that particular friend goes through a TCP relay.")
                                   ]),
                              TCP, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " A UDP connection has been established. For the own instance, this means it");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " is able to send UDP packets to DHT nodes, but may still be connected to");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " a TCP relay. For a friend, this means that the connection to that");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " particular friend was built using direct UDP packets.")
                                   ]),
                              UDP, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Inline
                      (ApiAst.Decl_Namespace (self,
                         [(ApiAst.Decl_GetSet ((ApiAst.Ty_UName CONNECTION),
                             connection_status,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Return whether we are connected to the DHT. The return value is equal to the");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " last value received through the `");
                                      (ApiAst.Cmtf_Var
                                         [ApiAst.Var_Event;
                                           (ApiAst.Var_LName
                                              connection_status)
                                           ]);
                                      (ApiAst.Cmtf_Doc "` callback.")]),
                                 (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                    [], ApiAst.Err_None))
                                 ))
                               ]
                             ));
                           (ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " This event is triggered whenever there is a change in the DHT connection");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " state. When disconnected, a client may choose to call ");
                                   (ApiAst.Cmtf_Var
                                      [(ApiAst.Var_LName bootstrap)]);
                                   (ApiAst.Cmtf_Doc " again, to");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " reconnect to the DHT. Note that this state may frequently change for short");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " amounts of time. Clients should therefore not immediately bootstrap on");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " receiving a disconnect.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " TODO(iphydf): how long should a client wait before bootstrapping again?")
                                   ]),
                              (ApiAst.Decl_Event (connection_status, true,
                                 [(ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " @param connection_status Whether we are connected to the DHT.")
                                          ]),
                                     (ApiAst.Decl_Typedef (
                                        (ApiAst.Ty_LName void), cb,
                                        [(ApiAst.Param (
                                            (ApiAst.Ty_UName CONNECTION),
                                            connection_status))
                                          ]
                                        ))
                                     ))
                                   ]
                                 ))
                              ))
                           ]
                         )));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Return the time in milliseconds before ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_LName iterate)]);
                           (ApiAst.Cmtf_Doc "() should be called again");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " for optimal performance.")]),
                      (ApiAst.Decl_Function (
                         (ApiAst.Ty_Const (ApiAst.Ty_LName uint32_t)),
                         iteration_interval, [], ApiAst.Err_None))
                      ));
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " The main loop that needs to be run in intervals of ");
                           (ApiAst.Cmtf_Var
                              [(ApiAst.Var_LName iteration_interval)]);
                           (ApiAst.Cmtf_Doc "()"); ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " milliseconds.")]),
                      (ApiAst.Decl_Function ((ApiAst.Ty_LName void), iterate,
                         [(ApiAst.Param ((ApiAst.Ty_TVar any), user_data))],
                         ApiAst.Err_None))
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: Internal client information (Tox address/id)");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Inline
                      (ApiAst.Decl_Namespace (self,
                         [(ApiAst.Decl_GetSet (
                             (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                (ApiAst.Ss_UName ADDRESS_SIZE))),
                             address,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Writes the Tox friend address of the client to a byte array. The address is");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " not in human-readable format. If a client wants to display the address,");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " formatting is required.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param address A memory region of at least ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_UName ADDRESS_SIZE)]);
                                      (ApiAst.Cmtf_Doc " bytes. If this");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         "   parameter is NULL, this function has no effect.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc " @see ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_UName ADDRESS_SIZE)]);
                                      (ApiAst.Cmtf_Doc
                                         " for the address format.")
                                      ]),
                                 (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                    [], ApiAst.Err_None))
                                 ))
                               ]
                             ));
                           (ApiAst.Decl_GetSet ((ApiAst.Ty_LName uint32_t),
                              nospam,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Set the 4-byte nospam part of the address. This value is expected in host");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " byte order. I.e. 0x12345678 will form the bytes [12, 34, 56, 78] in the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " nospam part of the Tox friend address.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param nospam Any 32 bit unsigned integer.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, set,
                                     [], ApiAst.Err_None))
                                  ));
                                (ApiAst.Decl_Comment (
                                   (ApiAst.Cmt_Doc
                                      [ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " Get the 4-byte nospam part of the address. This value is returned in host");
                                        ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc " byte order.")]),
                                   (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                      get, [], ApiAst.Err_None))
                                   ))
                                ]
                              ));
                           (ApiAst.Decl_GetSet (
                              (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                 (ApiAst.Ss_UName PUBLIC_KEY_SIZE))),
                              public_key,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Copy the Tox Public Key (long term) from the Tox object.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param public_key A memory region of at least ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName PUBLIC_KEY_SIZE)
                                            ]);
                                       (ApiAst.Cmtf_Doc " bytes. If");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   this parameter is NULL, this function has no effect.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                     [], ApiAst.Err_None))
                                  ))
                                ]
                              ));
                           (ApiAst.Decl_GetSet (
                              (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                 (ApiAst.Ss_UName SECRET_KEY_SIZE))),
                              secret_key,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Copy the Tox Secret Key from the Tox object.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param secret_key A memory region of at least ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName SECRET_KEY_SIZE)
                                            ]);
                                       (ApiAst.Cmtf_Doc " bytes. If");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   this parameter is NULL, this function has no effect.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                     [], ApiAst.Err_None))
                                  ))
                                ]
                              ))
                           ]
                         )));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: User-visible client information (nickname/status)");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Common error codes for all functions that set a piece of user-visible");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " client information.")]),
                      (ApiAst.Decl_Error (set_info,
                         [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL, None));
                           (ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Information length exceeded maximum permissible size.")
                                   ]),
                              TOO_LONG, None))
                           ]
                         ))
                      ));
                   (ApiAst.Decl_Inline
                      (ApiAst.Decl_Namespace (self,
                         [(ApiAst.Decl_GetSet (
                             (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                (ApiAst.Ss_Bounded (length, MAX_NAME_LENGTH))
                                )),
                             name,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Set the nickname for the Tox client.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Nickname length cannot exceed ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_UName MAX_NAME_LENGTH)]);
                                      (ApiAst.Cmtf_Doc
                                         ". If length is 0, the name");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " parameter is ignored (it can be NULL), and the nickname is set back to empty.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param name A byte array containing the new nickname.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param length The size of the name byte array.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @return true on success.")
                                      ]),
                                 (ApiAst.Decl_Function (ApiAst.Ty_Auto, set,
                                    [], (ApiAst.Err_From set_info)))
                                 ));
                               (ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Return the length of the current nickname as passed to ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName set)]);
                                       (ApiAst.Cmtf_Doc ".");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " If no nickname was set before calling this function, the name is empty,");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " and this function returns 0.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @see threading for concurrency implications.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                     size, [], ApiAst.Err_None))
                                  ));
                               (ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Write the nickname set by ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName set)]);
                                       (ApiAst.Cmtf_Doc " to a byte array.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " If no nickname was set before calling this function, the name is empty,");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " and this function has no effect.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " Call ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName size)]);
                                       (ApiAst.Cmtf_Doc
                                          " to find out how much memory to allocate for");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " the result.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param name A valid memory location large enough to hold the nickname.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   If this parameter is NULL, the function has no effect.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                     [], ApiAst.Err_None))
                                  ))
                               ]
                             ));
                           (ApiAst.Decl_GetSet (
                              (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                 (ApiAst.Ss_Bounded (length,
                                    MAX_STATUS_MESSAGE_LENGTH))
                                 )),
                              status_message,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Set the client's status message.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Status message length cannot exceed ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName
                                              MAX_STATUS_MESSAGE_LENGTH)
                                            ]);
                                       (ApiAst.Cmtf_Doc ". If");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " length is 0, the status parameter is ignored (it can be NULL), and the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " user status is set back to empty.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, set,
                                     [], (ApiAst.Err_From set_info)))
                                  ));
                                (ApiAst.Decl_Comment (
                                   (ApiAst.Cmt_Doc
                                      [ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " Return the length of the current status message as passed to ");
                                        (ApiAst.Cmtf_Var
                                           [(ApiAst.Var_LName set)]);
                                        (ApiAst.Cmtf_Doc ".");
                                        ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " If no status message was set before calling this function, the status");
                                        ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " is empty, and this function returns 0.");
                                        ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " @see threading for concurrency implications.")
                                        ]),
                                   (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                      size, [], ApiAst.Err_None))
                                   ));
                                (ApiAst.Decl_Comment (
                                   (ApiAst.Cmt_Doc
                                      [ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " Write the status message set by ");
                                        (ApiAst.Cmtf_Var
                                           [(ApiAst.Var_LName set)]);
                                        (ApiAst.Cmtf_Doc " to a byte array.");
                                        ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " If no status message was set before calling this function, the status is");
                                        ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " empty, and this function has no effect.");
                                        ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc " Call ");
                                        (ApiAst.Cmtf_Var
                                           [(ApiAst.Var_LName size)]);
                                        (ApiAst.Cmtf_Doc
                                           " to find out how much memory to allocate for");
                                        ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc " the result.");
                                        ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " @param status_message A valid memory location large enough to hold the");
                                        ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           "   status message. If this parameter is NULL, the function has no effect.")
                                        ]),
                                   (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                      get, [], ApiAst.Err_None))
                                   ))
                                ]
                              ));
                           (ApiAst.Decl_GetSet (
                              (ApiAst.Ty_UName USER_STATUS), status,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Set the client's user status.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param status One of the user statuses listed in the enumeration above.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, set,
                                     [], ApiAst.Err_None))
                                  ));
                                (ApiAst.Decl_Comment (
                                   (ApiAst.Cmt_Doc
                                      [ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " Returns the client's user status.")
                                        ]),
                                   (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                      get, [], ApiAst.Err_None))
                                   ))
                                ]
                              ))
                           ]
                         )));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Friend list management");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Add a friend to the friend list and send a friend request.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " A friend request message must be at least 1 byte long and at most");
                               ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                               (ApiAst.Cmtf_Var
                                  [(ApiAst.Var_UName
                                      MAX_FRIEND_REQUEST_LENGTH)
                                    ]);
                               (ApiAst.Cmtf_Doc "."); ApiAst.Cmtf_Break;
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Friend numbers are unique identifiers used in all functions that operate on");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " friends. Once added, a friend number is stable for the lifetime of the Tox");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " object. After saving the state and reloading it, the friend numbers may not");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " be the same as before. Deleting a friend creates a gap in the friend number");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " set, which is filled by the next adding of a friend. Any pattern in friend");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " numbers should not be relied on.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " If more than INT32_MAX friends are added, this function causes undefined");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc " behaviour.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param address The address of the friend (returned by ");
                               (ApiAst.Cmtf_Var
                                  [(ApiAst.Var_LName self);
                                    (ApiAst.Var_LName address);
                                    (ApiAst.Var_LName get)]);
                               (ApiAst.Cmtf_Doc " of"); ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   the friend you wish to add) it must be ");
                               (ApiAst.Cmtf_Var
                                  [(ApiAst.Var_UName ADDRESS_SIZE)]);
                               (ApiAst.Cmtf_Doc " bytes.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param message The message that will be sent along with the friend request.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param length The length of the data byte array.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @return the friend number on success, UINT32_MAX on failure.")
                               ]),
                          (ApiAst.Decl_Function ((ApiAst.Ty_LName uint32_t),
                             add,
                             [(ApiAst.Param (
                                 (ApiAst.Ty_Const
                                    (ApiAst.Ty_Array (
                                       (ApiAst.Ty_LName uint8_t),
                                       (ApiAst.Ss_UName ADDRESS_SIZE)))),
                                 address));
                               (ApiAst.Param (
                                  (ApiAst.Ty_Const
                                     (ApiAst.Ty_Array (
                                        (ApiAst.Ty_LName uint8_t),
                                        (ApiAst.Ss_Bounded (length,
                                           MAX_FRIEND_REQUEST_LENGTH))
                                        ))),
                                  message))
                               ],
                             (ApiAst.Err_List
                                [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL,
                                    None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The length of the friend request message exceeded");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc " ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_UName
                                                 MAX_FRIEND_REQUEST_LENGTH)
                                               ]);
                                          (ApiAst.Cmtf_Doc ".")]),
                                     TOO_LONG, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend request message was empty. This, and the TOO_LONG code will");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " never be returned from ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_LName add_norequest)
                                               ]);
                                          (ApiAst.Cmtf_Doc ".")]),
                                     NO_MESSAGE, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend address belongs to the sending client.")
                                          ]),
                                     OWN_KEY, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " A friend request has already been sent, or the address belongs to a friend");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " that is already on the friend list.")
                                          ]),
                                     ALREADY_SENT, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend address checksum failed.")
                                          ]),
                                     BAD_CHECKSUM, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend was already there, but the nospam value was different.")
                                          ]),
                                     SET_NEW_NOSPAM, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " A memory allocation failed when trying to increase the friend list size.")
                                          ]),
                                     MALLOC, None))
                                  ])
                             ))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Add a friend without sending a friend request.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This function is used to add a friend in response to a friend request. If the");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " client receives a friend request, it can be reasonably sure that the other");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " client added this client as a friend, eliminating the need for a friend");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " request.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This function is also useful in a situation where both instances are");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " controlled by the same entity, so that this entity can perform the mutual");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " friend adding. In this case, there is no need for a friend request, either.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param public_key A byte array of length ");
                                (ApiAst.Cmtf_Var
                                   [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                                (ApiAst.Cmtf_Doc " containing the");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   "   Public Key (not the Address) of the friend to add.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @return the friend number on success, UINT32_MAX on failure.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " @see ");
                                (ApiAst.Cmtf_Var [(ApiAst.Var_LName add)]);
                                (ApiAst.Cmtf_Doc
                                   " for a more detailed description of friend numbers.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName uint32_t),
                              add_norequest,
                              [(ApiAst.Param (
                                  (ApiAst.Ty_Const
                                     (ApiAst.Ty_Array (
                                        (ApiAst.Ty_LName uint8_t),
                                        (ApiAst.Ss_UName PUBLIC_KEY_SIZE)))),
                                  public_key))
                                ],
                              (ApiAst.Err_From add)))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Remove a friend from the friend list.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This does not notify the friend of their deletion. After calling this");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " function, this client will appear offline to the friend and no communication");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " can occur between the two.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param friend_number Friend number for the friend to be deleted.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " @return true on success.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                              delete,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " There was no friend with the given friend number. No friends were deleted.")
                                          ]),
                                     FRIEND_NOT_FOUND, None))
                                   ])
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Friend list queries");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Return the friend number associated with that Public Key.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @return the friend number on success, UINT32_MAX on failure.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param public_key A byte array containing the Public Key.")
                               ]),
                          (ApiAst.Decl_Function (
                             (ApiAst.Ty_Const (ApiAst.Ty_LName uint32_t)),
                             by_public_key,
                             [(ApiAst.Param (
                                 (ApiAst.Ty_Const
                                    (ApiAst.Ty_Array (
                                       (ApiAst.Ty_LName uint8_t),
                                       (ApiAst.Ss_UName PUBLIC_KEY_SIZE)))),
                                 public_key))
                               ],
                             (ApiAst.Err_List
                                [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL,
                                    None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " No friend with the given Public Key exists on the friend list.")
                                          ]),
                                     NOT_FOUND, None))
                                  ])
                             ))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Checks if a friend with the given friend number exists and returns true if");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " it does.")]),
                           (ApiAst.Decl_Function (
                              (ApiAst.Ty_Const (ApiAst.Ty_LName bool)),
                              exists,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number))
                                ],
                              ApiAst.Err_None))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Inline
                      (ApiAst.Decl_Namespace (self,
                         [(ApiAst.Decl_GetSet (
                             (ApiAst.Ty_Array ((ApiAst.Ty_LName uint32_t),
                                (ApiAst.Ss_LName size))),
                             friend_list,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Return the number of friends on the friend list.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " This function can be used to determine how much memory to allocate for");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc " ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_LName get)]);
                                      (ApiAst.Cmtf_Doc ".")]),
                                 (ApiAst.Decl_Function (ApiAst.Ty_Auto, size,
                                    [], ApiAst.Err_None))
                                 ));
                               (ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Copy a list of valid friend numbers into an array.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " Call ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName size)]);
                                       (ApiAst.Cmtf_Doc
                                          " to determine the number of elements to allocate.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_list A memory region with enough space to hold the friend");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   list. If this parameter is NULL, this function has no effect.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                     [], ApiAst.Err_None))
                                  ))
                               ]
                             ))
                           ]
                         )));
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_GetSet (
                          (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                             (ApiAst.Ss_UName PUBLIC_KEY_SIZE))),
                          public_key,
                          [(ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Copies the Public Key associated with a given friend number to a byte array.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param friend_number The friend number you want the Public Key of.");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param public_key A memory region of at least ");
                                   (ApiAst.Cmtf_Var
                                      [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                                   (ApiAst.Cmtf_Doc " bytes. If");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      "   this parameter is NULL, this function has no effect.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @return true on success.")
                                   ]),
                              (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                 [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                     friend_number))
                                   ],
                                 (ApiAst.Err_List
                                    [(ApiAst.Enum_Name (
                                        (ApiAst.Cmt_Doc
                                           [ApiAst.Cmtf_Break;
                                             (ApiAst.Cmtf_Doc
                                                " No friend with the given number exists on the friend list.")
                                             ]),
                                        FRIEND_NOT_FOUND, None))
                                      ])
                                 ))
                              ))
                            ]
                          ))
                        ]
                      ));
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_GetSet ((ApiAst.Ty_LName uint64_t),
                          last_online,
                          [(ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Return a unix-time timestamp of the last time the friend associated with a given");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " friend number was seen online. This function will return UINT64_MAX on error.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param friend_number The friend number you want to query.")
                                   ]),
                              (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                 [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                     friend_number))
                                   ],
                                 (ApiAst.Err_List
                                    [(ApiAst.Enum_Name (
                                        (ApiAst.Cmt_Doc
                                           [ApiAst.Cmtf_Break;
                                             (ApiAst.Cmtf_Doc
                                                " No friend with the given number exists on the friend list.")
                                             ]),
                                        FRIEND_NOT_FOUND, None))
                                      ])
                                 ))
                              ))
                            ]
                          ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: Friend-specific state queries (can also be received through callbacks)");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Common error codes for friend state query functions.")
                               ]),
                          (ApiAst.Decl_Error (query,
                             [(ApiAst.Enum_Name (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " The pointer parameter for storing the query result (name, message) was");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " NULL. Unlike the `_self_` variants of these functions, which have no effect");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " when a parameter is NULL, these functions return an error in that case.")
                                      ]),
                                 NULL, None));
                               (ApiAst.Enum_Name (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " The friend_number did not designate a valid friend.")
                                       ]),
                                  FRIEND_NOT_FOUND, None))
                               ]
                             ))
                          ));
                        (ApiAst.Decl_GetSet (
                           (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                              (ApiAst.Ss_Bounded (length, MAX_NAME_LENGTH)))),
                           name,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Return the length of the friend's name. If the friend number is invalid, the");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " return value is unspecified.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " The return value is equal to the `length` argument received by the last");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " `");
                                    (ApiAst.Cmtf_Var
                                       [ApiAst.Var_Event;
                                         (ApiAst.Var_LName name)]);
                                    (ApiAst.Cmtf_Doc "` callback.")]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, size,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number))
                                    ],
                                  (ApiAst.Err_From query)))
                               ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Write the name of the friend designated by the given friend number to a byte");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " array.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " Call ");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_LName size)]);
                                     (ApiAst.Cmtf_Doc
                                        " to determine the allocation size for the `name`");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " parameter.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " The data written to `name` is equal to the data received by the last");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " `");
                                     (ApiAst.Cmtf_Var
                                        [ApiAst.Var_Event;
                                          (ApiAst.Var_LName name)]);
                                     (ApiAst.Cmtf_Doc "` callback.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @param name A valid memory region large enough to store the friend's name.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @return true on success.")
                                     ]),
                                (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                   [(ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       friend_number))
                                     ],
                                   (ApiAst.Err_From query)))
                                ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a friend changes their name.")
                                ]),
                           (ApiAst.Decl_Event (name, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend whose name changed.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param name A byte array containing the same data as");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName name);
                                            (ApiAst.Var_LName get)]);
                                       (ApiAst.Cmtf_Doc
                                          " would write to its `name` parameter.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length A value equal to the return value of");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName name);
                                            (ApiAst.Var_LName size)]);
                                       (ApiAst.Cmtf_Doc ".")]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_Bounded (length,
                                                   MAX_NAME_LENGTH))
                                                ))),
                                          name))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_GetSet (
                           (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                              (ApiAst.Ss_Bounded (length,
                                 MAX_STATUS_MESSAGE_LENGTH))
                              )),
                           status_message,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Return the length of the friend's status message. If the friend number is");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " invalid, the return value is SIZE_MAX.")
                                    ]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, size,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number))
                                    ],
                                  (ApiAst.Err_From query)))
                               ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Write the status message of the friend designated by the given friend number to a byte");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " array.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " Call ");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_LName size)]);
                                     (ApiAst.Cmtf_Doc
                                        " to determine the allocation size for the `status_name`");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " parameter.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " The data written to `status_message` is equal to the data received by the last");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " `");
                                     (ApiAst.Cmtf_Var
                                        [ApiAst.Var_Event;
                                          (ApiAst.Var_LName status_message)]);
                                     (ApiAst.Cmtf_Doc "` callback.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @param status_message A valid memory region large enough to store the friend's status message.")
                                     ]),
                                (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                   [(ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       friend_number))
                                     ],
                                   (ApiAst.Err_From query)))
                                ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a friend changes their status message.")
                                ]),
                           (ApiAst.Decl_Event (status_message, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend whose status message");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   changed.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param message A byte array containing the same data as");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName status_message);
                                            (ApiAst.Var_LName get)]);
                                       (ApiAst.Cmtf_Doc
                                          " would write to its `status_message` parameter.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length A value equal to the return value of");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName status_message);
                                            (ApiAst.Var_LName size)]);
                                       (ApiAst.Cmtf_Doc ".")]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_Bounded (length,
                                                   MAX_STATUS_MESSAGE_LENGTH
                                                   ))
                                                ))),
                                          message))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_GetSet ((ApiAst.Ty_UName USER_STATUS),
                           status,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Return the friend's user status (away/busy/...). If the friend number is");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " invalid, the return value is unspecified.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " The status returned is equal to the last status received through the");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " `");
                                    (ApiAst.Cmtf_Var
                                       [ApiAst.Var_Event;
                                         (ApiAst.Var_LName status)]);
                                    (ApiAst.Cmtf_Doc "` callback.")]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number))
                                    ],
                                  (ApiAst.Err_From query)))
                               ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a friend changes their user status.")
                                ]),
                           (ApiAst.Decl_Event (status, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend whose user status");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   changed.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param status The new user status.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_UName USER_STATUS),
                                          status))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_GetSet ((ApiAst.Ty_UName CONNECTION),
                           connection_status,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Check whether a friend is currently connected to this client.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " The result of this function is equal to the last value received by the");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " `");
                                    (ApiAst.Cmtf_Var
                                       [ApiAst.Var_Event;
                                         (ApiAst.Var_LName connection_status)
                                         ]);
                                    (ApiAst.Cmtf_Doc "` callback.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param friend_number The friend number for which to query the connection");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc "   status.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @return the friend's connection status as it was received through the");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc "   `");
                                    (ApiAst.Cmtf_Var
                                       [ApiAst.Var_Event;
                                         (ApiAst.Var_LName connection_status)
                                         ]);
                                    (ApiAst.Cmtf_Doc "` event.")]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number))
                                    ],
                                  (ApiAst.Err_From query)))
                               ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a friend goes offline after having been online,");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " or when a friend goes online.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This callback is not called when adding friends. It is assumed that when");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " adding friends, their connection status is initially offline.")
                                ]),
                           (ApiAst.Decl_Event (connection_status, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend whose connection status");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   changed.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param connection_status The result of calling");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName
                                              connection_status);
                                            (ApiAst.Var_LName get)]);
                                       (ApiAst.Cmtf_Doc
                                          " on the passed friend_number.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_UName CONNECTION),
                                          connection_status))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_GetSet ((ApiAst.Ty_LName bool), typing,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Check whether a friend is currently typing a message.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param friend_number The friend number for which to query the typing status.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @return true if the friend is typing.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @return false if the friend is not typing, or the friend number was");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       "   invalid. Inspect the error code to determine which case it is.")
                                    ]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number))
                                    ],
                                  (ApiAst.Err_From query)))
                               ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a friend starts or stops typing.")
                                ]),
                           (ApiAst.Decl_Event (typing, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend who started or stopped");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   typing.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param is_typing The result of calling ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName typing);
                                            (ApiAst.Var_LName get)]);
                                       (ApiAst.Cmtf_Doc " on the passed");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   friend_number.")]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param ((ApiAst.Ty_LName bool),
                                          is_typing))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Sending private messages");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Inline
                      (ApiAst.Decl_Namespace (self,
                         [(ApiAst.Decl_GetSet ((ApiAst.Ty_LName bool),
                             typing,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Set the client's typing status for a friend.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " The client is responsible for turning it on or off.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param friend_number The friend to which the client is typing a message.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param typing The typing status. True means the client is typing.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @return true on success.")
                                      ]),
                                 (ApiAst.Decl_Function (ApiAst.Ty_Auto, set,
                                    [(ApiAst.Param (
                                        (ApiAst.Ty_LName uint32_t),
                                        friend_number))
                                      ],
                                    (ApiAst.Err_List
                                       [(ApiAst.Enum_Name (
                                           (ApiAst.Cmt_Doc
                                              [ApiAst.Cmtf_Break;
                                                (ApiAst.Cmtf_Doc
                                                   " The friend number did not designate a valid friend.")
                                                ]),
                                           FRIEND_NOT_FOUND, None))
                                         ])
                                    ))
                                 ))
                               ]
                             ))
                           ]
                         )));
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_Namespace (send,
                          [(ApiAst.Decl_Comment (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Send a text chat message to an online friend.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " This function creates a chat message packet and pushes it into the send");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc " queue.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " The message length may not exceed ");
                                   (ApiAst.Cmtf_Var
                                      [(ApiAst.Var_UName MAX_MESSAGE_LENGTH)]);
                                   (ApiAst.Cmtf_Doc ". Larger messages");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " must be split by the client and sent as separate messages. Other clients can");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " then reassemble the fragments. Messages may not be empty.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " The return value of this function is the message ID. If a read receipt is");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " received, the triggered `");
                                   (ApiAst.Cmtf_Var
                                      [ApiAst.Var_Event;
                                        (ApiAst.Var_LName read_receipt)]);
                                   (ApiAst.Cmtf_Doc
                                      "` event will be passed this message ID.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Message IDs are unique per friend. The first message ID is 0. Message IDs are");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " incremented by 1 each time a message is sent. If UINT32_MAX messages were");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " sent, the next message ID is 0.");
                                   ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param type Message type (normal, action, ...).");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param friend_number The friend number of the friend to send the message to.");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param message A non-NULL pointer to the first element of a byte array");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      "   containing the message text.");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " @param length Length of the message to be sent.")
                                   ]),
                              (ApiAst.Decl_Function (
                                 (ApiAst.Ty_LName uint32_t), message,
                                 [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                     friend_number));
                                   (ApiAst.Param (
                                      (ApiAst.Ty_UName MESSAGE_TYPE), type));
                                   (ApiAst.Param (
                                      (ApiAst.Ty_Const
                                         (ApiAst.Ty_Array (
                                            (ApiAst.Ty_LName uint8_t),
                                            (ApiAst.Ss_Bounded (length,
                                               MAX_MESSAGE_LENGTH))
                                            ))),
                                      message))
                                   ],
                                 (ApiAst.Err_List
                                    [(ApiAst.Enum_Name (ApiAst.Cmt_None,
                                        NULL, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " The friend number did not designate a valid friend.")
                                              ]),
                                         FRIEND_NOT_FOUND, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " This client is currently not connected to the friend.")
                                              ]),
                                         FRIEND_NOT_CONNECTED, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " An allocation error occurred while increasing the send queue size.")
                                              ]),
                                         SENDQ, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " Message length exceeded ");
                                              (ApiAst.Cmtf_Var
                                                 [(ApiAst.Var_UName
                                                     MAX_MESSAGE_LENGTH)
                                                   ]);
                                              (ApiAst.Cmtf_Doc ".")]),
                                         TOO_LONG, None));
                                      (ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " Attempted to send a zero-length message.")
                                              ]),
                                         EMPTY, None))
                                      ])
                                 ))
                              ))
                            ]
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when the friend receives the message sent with");
                                ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                                (ApiAst.Cmtf_Var
                                   [(ApiAst.Var_LName send);
                                     (ApiAst.Var_LName message)]);
                                (ApiAst.Cmtf_Doc
                                   " with the corresponding message ID.")
                                ]),
                           (ApiAst.Decl_Event (read_receipt, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend who received the message.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param message_id The message ID as returned from ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName send);
                                            (ApiAst.Var_LName message)]);
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   corresponding to the message sent.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          message_id))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: Receiving private messages and friend requests");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " This event is triggered when a friend request is received.")
                               ]),
                          (ApiAst.Decl_Event (request, true,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param public_key The Public Key of the user who sent the friend request.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param message The message they sent along with the request.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param length The size of the message byte array.")
                                      ]),
                                 (ApiAst.Decl_Typedef (
                                    (ApiAst.Ty_LName void), cb,
                                    [(ApiAst.Param (
                                        (ApiAst.Ty_Const
                                           (ApiAst.Ty_Array (
                                              (ApiAst.Ty_LName uint8_t),
                                              (ApiAst.Ss_UName
                                                 PUBLIC_KEY_SIZE)
                                              ))),
                                        public_key));
                                      (ApiAst.Param (
                                         (ApiAst.Ty_Const
                                            (ApiAst.Ty_Array (
                                               (ApiAst.Ty_LName uint8_t),
                                               (ApiAst.Ss_Bounded (length,
                                                  MAX_MESSAGE_LENGTH))
                                               ))),
                                         message))
                                      ]
                                    ))
                                 ))
                               ]
                             ))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a message from a friend is received.")
                                ]),
                           (ApiAst.Decl_Event (message, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend who sent the message.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param message The message data they sent.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The size of the message byte array.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_UName MESSAGE_TYPE),
                                          type));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_Bounded (length,
                                                   MAX_MESSAGE_LENGTH))
                                                ))),
                                          message))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: File transmission: common between sending and receiving");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Comment (
                      (ApiAst.Cmt_Doc
                         [ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " Generates a cryptographic hash of the given data.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This function may be used by clients for any purpose, but is provided");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " primarily for validating cached avatars. This use is highly recommended to");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " avoid unnecessary avatar updates.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " If hash is NULL or data is NULL while length is not 0 the function returns false,");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc " otherwise it returns true.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " This function is a wrapper to internal message-digest functions.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param hash A valid memory location the hash data. It must be at least");
                           ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc "   ");
                           (ApiAst.Cmtf_Var [(ApiAst.Var_UName HASH_LENGTH)]);
                           (ApiAst.Cmtf_Doc " bytes in size.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param data Data to be hashed or NULL.");
                           ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @param length Size of the data array or 0.");
                           ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                           (ApiAst.Cmtf_Doc
                              " @return true if hash was not NULL.")
                           ]),
                      (ApiAst.Decl_Static
                         (ApiAst.Decl_Function ((ApiAst.Ty_LName bool), hash,
                            [(ApiAst.Param (
                                (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                   (ApiAst.Ss_UName HASH_LENGTH))),
                                hash));
                              (ApiAst.Param (
                                 (ApiAst.Ty_Const
                                    (ApiAst.Ty_Array (
                                       (ApiAst.Ty_LName uint8_t),
                                       (ApiAst.Ss_LName length)))),
                                 data))
                              ],
                            ApiAst.Err_None)))
                      ));
                   (ApiAst.Decl_Namespace (file,
                      [(ApiAst.Decl_Enum (ApiAst.Enum_Normal, KIND,
                          [(ApiAst.Enum_Name (
                              (ApiAst.Cmt_Doc
                                 [ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " Arbitrary file data. Clients can choose to handle it based on the file name");
                                   ApiAst.Cmtf_Break;
                                   (ApiAst.Cmtf_Doc
                                      " or magic or any other way they choose.")
                                   ]),
                              DATA, None));
                            (ApiAst.Enum_Name (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Avatar file_id. This consists of ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_LName hash)]);
                                    (ApiAst.Cmtf_Doc "(image).");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Avatar data. This consists of the image data.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Avatars can be sent at any time the client wishes. Generally, a client will");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " send the avatar to a friend when that friend comes online, and to all");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " friends when the avatar changed. A client can save some traffic by");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " remembering which friend received the updated avatar already and only send");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " it if the friend has an out of date avatar.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Clients who receive avatar send requests can reject it (by sending");
                                    ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName CONTROL);
                                         (ApiAst.Var_UName CANCEL)]);
                                    (ApiAst.Cmtf_Doc
                                       " before any other controls), or accept it (by");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " sending ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName CONTROL);
                                         (ApiAst.Var_UName RESUME)]);
                                    (ApiAst.Cmtf_Doc
                                       "). The file_id of length ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName HASH_LENGTH)]);
                                    (ApiAst.Cmtf_Doc " bytes");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " (same length as ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName FILE_ID_LENGTH)]);
                                    (ApiAst.Cmtf_Doc
                                       ") will contain the hash. A client can compare");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " this hash with a saved hash and send ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName CONTROL);
                                         (ApiAst.Var_UName CANCEL)]);
                                    (ApiAst.Cmtf_Doc
                                       " to terminate the avatar");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " transfer if it matches.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " When file_size is set to 0 in the transfer request it means that the client");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " has no avatar.")]),
                               AVATAR, None))
                            ]
                          ));
                        (ApiAst.Decl_Enum (ApiAst.Enum_Class, CONTROL,
                           [(ApiAst.Enum_Name (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Sent by the receiving side to accept a file send request. Also sent after a");
                                    ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName PAUSE)]);
                                    (ApiAst.Cmtf_Doc
                                       " command to continue sending or receiving.")
                                    ]),
                               RESUME, None));
                             (ApiAst.Enum_Name (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Sent by clients to pause the file transfer. The initial state of a file");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " transfer is always paused on the receiving side and running on the sending");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " side. If both the sending and receiving side pause the transfer, then both");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " need to send ");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_UName RESUME)]);
                                     (ApiAst.Cmtf_Doc
                                        " for the transfer to resume.")
                                     ]),
                                PAUSE, None));
                             (ApiAst.Enum_Name (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Sent by the receiving side to reject a file send request before any other");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " commands are sent. Also sent by either side to terminate a file transfer.")
                                     ]),
                                CANCEL, None))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Sends a file control command to a friend for a given file transfer.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param friend_number The friend number of the friend the file is being");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   "   transferred to or received from.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param file_number The friend-specific identifier for the file transfer.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param control The control command to send.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " @return true on success.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                              control,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number));
                                (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                   file_number));
                                (ApiAst.Param ((ApiAst.Ty_UName CONTROL),
                                   control))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend_number passed did not designate a valid friend.")
                                          ]),
                                     FRIEND_NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " This client is currently not connected to the friend.")
                                           ]),
                                      FRIEND_NOT_CONNECTED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " No file transfer with the given file number was found for the given friend.")
                                           ]),
                                      NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " A RESUME control was sent, but the file transfer is running normally.")
                                           ]),
                                      NOT_PAUSED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " A RESUME control was sent, but the file transfer was paused by the other");
                                           ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " party. Only the party that paused the transfer can resume it.")
                                           ]),
                                      DENIED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " A PAUSE control was sent, but the file transfer was already paused.")
                                           ]),
                                      ALREADY_PAUSED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Packet queue is full.")
                                           ]),
                                      SENDQ, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a file control command is received from a");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " friend.")]),
                           (ApiAst.Decl_Event (recv_control, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " When receiving ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName CONTROL);
                                            (ApiAst.Var_UName CANCEL)]);
                                       (ApiAst.Cmtf_Doc
                                          ", the client should release the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " resources associated with the file number and consider the transfer failed.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend who is sending the file.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param file_number The friend-specific file number the data received is");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   associated with.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param control The file control command received.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          file_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_UName CONTROL), control
                                          ))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Sends a file seek control command to a friend for a given file transfer.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This function can only be called to resume a file transfer right before");
                                ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " ");
                                (ApiAst.Cmtf_Var
                                   [(ApiAst.Var_UName CONTROL);
                                     (ApiAst.Var_UName RESUME)]);
                                (ApiAst.Cmtf_Doc " is sent.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param friend_number The friend number of the friend the file is being");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc "   received from.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param file_number The friend-specific identifier for the file transfer.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param position The position that the file should be seeked to.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                              seek,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number));
                                (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                   file_number));
                                (ApiAst.Param ((ApiAst.Ty_LName uint64_t),
                                   position))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend_number passed did not designate a valid friend.")
                                          ]),
                                     FRIEND_NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " This client is currently not connected to the friend.")
                                           ]),
                                      FRIEND_NOT_CONNECTED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " No file transfer with the given file number was found for the given friend.")
                                           ]),
                                      NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " File was not in a state where it could be seeked.")
                                           ]),
                                      DENIED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Seek position was invalid")
                                           ]),
                                      INVALID_POSITION, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Packet queue is full.")
                                           ]),
                                      SENDQ, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Error (get,
                           [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL, None));
                             (ApiAst.Enum_Name (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " The friend_number passed did not designate a valid friend.")
                                     ]),
                                FRIEND_NOT_FOUND, None));
                             (ApiAst.Enum_Name (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " No file transfer with the given file number was found for the given friend.")
                                     ]),
                                NOT_FOUND, None))
                             ]
                           ));
                        (ApiAst.Decl_GetSet (
                           (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                              (ApiAst.Ss_UName FILE_ID_LENGTH))),
                           file_id,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Copy the file id associated to the file transfer to a byte array.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param friend_number The friend number of the friend the file is being");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       "   transferred to or received from.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param file_number The friend-specific identifier for the file transfer.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param file_id A memory region of at least ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName FILE_ID_LENGTH)]);
                                    (ApiAst.Cmtf_Doc " bytes. If");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       "   this parameter is NULL, this function has no effect.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @return true on success.")
                                    ]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number));
                                    (ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       file_number))
                                    ],
                                  (ApiAst.Err_From get)))
                               ))
                             ]
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: File transmission: sending");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (file,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Send a file transmission request.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " Maximum filename length is ");
                               (ApiAst.Cmtf_Var
                                  [(ApiAst.Var_UName MAX_FILENAME_LENGTH)]);
                               (ApiAst.Cmtf_Doc " bytes. The filename");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " should generally just be a file name, not a path with directory names.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " If a non-UINT64_MAX file size is provided, it can be used by both sides to");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " determine the sending progress. File size can be set to UINT64_MAX for streaming");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc " data of unknown size.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " File transmission occurs in chunks, which are requested through the");
                               ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc " `");
                               (ApiAst.Cmtf_Var
                                  [ApiAst.Var_Event;
                                    (ApiAst.Var_LName chunk_request)]);
                               (ApiAst.Cmtf_Doc "` event.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " When a friend goes offline, all file transfers associated with the friend are");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc " purged from core.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " If the file contents change during a transfer, the behaviour is unspecified");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " in general. What will actually happen depends on the mode in which the file");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " was modified and how the client determines the file size.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " - If the file size was increased");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - and sending mode was streaming (file_size = UINT64_MAX), the behaviour");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "     will be as expected.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - and sending mode was file (file_size != UINT64_MAX), the");
                               ApiAst.Cmtf_Break; (ApiAst.Cmtf_Doc "     ");
                               (ApiAst.Cmtf_Var
                                  [ApiAst.Var_Event;
                                    (ApiAst.Var_LName chunk_request)]);
                               (ApiAst.Cmtf_Doc
                                  " callback will receive length = 0 when Core thinks");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "     the file transfer has finished. If the client remembers the file size as");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "     it was when sending the request, it will terminate the transfer normally.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "     If the client re-reads the size, it will think the friend cancelled the");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "     transfer.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " - If the file size was decreased");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - and sending mode was streaming, the behaviour is as expected.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - and sending mode was file, the callback will return 0 at the new");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "     (earlier) end-of-file, signalling to the friend that the transfer was");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "     cancelled.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " - If the file contents were modified");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - at a position before the current read, the two files (local and remote)");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "     will differ after the transfer terminates.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - at a position after the current read, the file transfer will succeed as");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "     expected.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   - In either case, both sides will regard the transfer as complete and");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "     successful.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param friend_number The friend number of the friend the file send request");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "   should be sent to.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param kind The meaning of the file to be sent.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param file_size Size in bytes of the file the client wants to send, UINT64_MAX if");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "   unknown or streaming.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param file_id A file identifier of length ");
                               (ApiAst.Cmtf_Var
                                  [(ApiAst.Var_UName FILE_ID_LENGTH)]);
                               (ApiAst.Cmtf_Doc " that can be used to");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   uniquely identify file transfers across core restarts. If NULL, a random one will");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   be generated by core. It can then be obtained by using ");
                               (ApiAst.Cmtf_Var
                                  [(ApiAst.Var_LName file_id);
                                    (ApiAst.Var_LName get)]);
                               (ApiAst.Cmtf_Doc "()."); ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param filename Name of the file. Does not need to be the actual name. This");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   name will be sent along with the file send request.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @param filename_length Size in bytes of the filename.");
                               ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " @return A file number used as an identifier in subsequent callbacks. This");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   number is per friend. File numbers are reused after a transfer terminates.");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  "   On failure, this function returns UINT32_MAX. Any pattern in file numbers");
                               ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc "   should not be relied on.")
                               ]),
                          (ApiAst.Decl_Function ((ApiAst.Ty_LName uint32_t),
                             send,
                             [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                 friend_number));
                               (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  kind));
                               (ApiAst.Param ((ApiAst.Ty_LName uint64_t),
                                  file_size));
                               (ApiAst.Param (
                                  (ApiAst.Ty_Const
                                     (ApiAst.Ty_Array (
                                        (ApiAst.Ty_LName uint8_t),
                                        (ApiAst.Ss_UName FILE_ID_LENGTH)))),
                                  file_id));
                               (ApiAst.Param (
                                  (ApiAst.Ty_Const
                                     (ApiAst.Ty_Array (
                                        (ApiAst.Ty_LName uint8_t),
                                        (ApiAst.Ss_Bounded (filename_length,
                                           MAX_FILENAME_LENGTH))
                                        ))),
                                  filename))
                               ],
                             (ApiAst.Err_List
                                [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL,
                                    None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The friend_number passed did not designate a valid friend.")
                                          ]),
                                     FRIEND_NOT_FOUND, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " This client is currently not connected to the friend.")
                                          ]),
                                     FRIEND_NOT_CONNECTED, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Filename length exceeded ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_UName
                                                 MAX_FILENAME_LENGTH)
                                               ]);
                                          (ApiAst.Cmtf_Doc " bytes.")]),
                                     NAME_TOO_LONG, None));
                                  (ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Too many ongoing transfers. The maximum number of concurrent file transfers");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " is 256 per friend per direction (sending and receiving).")
                                          ]),
                                     TOO_MANY, None))
                                  ])
                             ))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Send a chunk of file data to a friend.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This function is called in response to the `");
                                (ApiAst.Cmtf_Var
                                   [ApiAst.Var_Event;
                                     (ApiAst.Var_LName chunk_request)]);
                                (ApiAst.Cmtf_Doc "` callback. The");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " length parameter should be equal to the one received though the callback.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " If it is zero, the transfer is assumed complete. For files with known size,");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Core will know that the transfer is complete after the last byte has been");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " received, so it is not necessary (though not harmful) to send a zero-length");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " chunk to terminate. For streams, core will know that the transfer is finished");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " if a chunk with length less than the length requested in the callback is sent.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param friend_number The friend number of the receiving friend for this file.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param file_number The file transfer identifier returned by tox_file_send.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param position The file or stream position from which to continue reading.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " @return true on success.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                              send_chunk,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number));
                                (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                   file_number));
                                (ApiAst.Param ((ApiAst.Ty_LName uint64_t),
                                   position));
                                (ApiAst.Param (
                                   (ApiAst.Ty_Const
                                      (ApiAst.Ty_Array (
                                         (ApiAst.Ty_LName uint8_t),
                                         (ApiAst.Ss_LName length)))),
                                   data))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The length parameter was non-zero, but data was NULL.")
                                          ]),
                                     NULL, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The friend_number passed did not designate a valid friend.")
                                           ]),
                                      FRIEND_NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " This client is currently not connected to the friend.")
                                           ]),
                                      FRIEND_NOT_CONNECTED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " No file transfer with the given file number was found for the given friend.")
                                           ]),
                                      NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " File transfer was found but isn't in a transferring state: (paused, done,");
                                           ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " broken, etc...) (happens only when not called from the request chunk callback).")
                                           ]),
                                      NOT_TRANSFERRING, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Attempted to send more or less data than requested. The requested data size is");
                                           ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " adjusted according to maximum transmission unit and the expected end of");
                                           ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " the file. Trying to send less or more than requested will return this error.")
                                           ]),
                                      INVALID_LENGTH, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Packet queue is full.")
                                           ]),
                                      SENDQ, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Position parameter was wrong.")
                                           ]),
                                      WRONG_POSITION, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when Core is ready to send more file data.")
                                ]),
                           (ApiAst.Decl_Event (chunk_request, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " If the length parameter is 0, the file transfer is finished, and the client's");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " resources associated with the file number should be released. After a call");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " with zero length, the file number can be reused for future file transfers.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " If the requested position is not equal to the client's idea of the current");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " file or stream position, it will need to seek. In case of read-once streams,");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " the client should keep the last read chunk so that a seek back can be");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " supported. A seek-back only ever needs to read from the last requested chunk.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " This happens when a chunk was requested, but the send failed. A seek-back");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " request can occur an arbitrary number of times for any given chunk.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " In response to receiving this callback, the client should call the function");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " `");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName send_chunk)]);
                                       (ApiAst.Cmtf_Doc
                                          "` with the requested chunk. If the number of bytes sent");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " through that function is zero, the file transfer is assumed complete. A");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " client must send the full length of data requested with this callback.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the receiving friend for this file.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param file_number The file transfer identifier returned by ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_LName send)]);
                                       (ApiAst.Cmtf_Doc ".");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param position The file or stream position from which to continue reading.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The number of bytes requested for the current chunk.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          file_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint64_t),
                                          position));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName size_t), length))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: File transmission: receiving");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (file,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc
                                  " This event is triggered when a file transfer request is received.")
                               ]),
                          (ApiAst.Decl_Event (recv, true,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " The client should acquire resources to be associated with the file transfer.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Incoming file transfers start in the PAUSED state. After this callback");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " returns, a transfer can be rejected by sending a ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_UName CONTROL);
                                           (ApiAst.Var_UName CANCEL)]);
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " control command before any other control commands. It can be accepted by");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc " sending ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_UName CONTROL);
                                           (ApiAst.Var_UName RESUME)]);
                                      (ApiAst.Cmtf_Doc ".");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param friend_number The friend number of the friend who is sending the file");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc "   transfer request.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param file_number The friend-specific file number the data received is");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc "   associated with.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param kind The meaning of the file to be sent.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param file_size Size in bytes of the file the client wants to send,");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         "   UINT64_MAX if unknown or streaming.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param filename Name of the file. Does not need to be the actual name. This");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         "   name will be sent along with the file send request.");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param filename_length Size in bytes of the filename.")
                                      ]),
                                 (ApiAst.Decl_Typedef (
                                    (ApiAst.Ty_LName void), cb,
                                    [(ApiAst.Param (
                                        (ApiAst.Ty_LName uint32_t),
                                        friend_number));
                                      (ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         file_number));
                                      (ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t), kind));
                                      (ApiAst.Param (
                                         (ApiAst.Ty_LName uint64_t),
                                         file_size));
                                      (ApiAst.Param (
                                         (ApiAst.Ty_Const
                                            (ApiAst.Ty_Array (
                                               (ApiAst.Ty_LName uint8_t),
                                               (ApiAst.Ss_Bounded (
                                                  filename_length,
                                                  MAX_FILENAME_LENGTH))
                                               ))),
                                         filename))
                                      ]
                                    ))
                                 ))
                               ]
                             ))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is first triggered when a file transfer request is received, and");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " subsequently when a chunk of file data for an accepted request was received.")
                                ]),
                           (ApiAst.Decl_Event (recv_chunk, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " When length is 0, the transfer is finished and the client should release the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " resources it acquired for the transfer. After a call with length = 0, the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " file number can be reused for new file transfers.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " If position is equal to file_size (received in the file_receive callback)");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " when the transfer finishes, the file was received completely. Otherwise, if");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " file_size was UINT64_MAX, streaming ended successfully when length is 0.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend who is sending the file.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param file_number The friend-specific file number the data received is");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   associated with.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param position The file position of the first byte in data.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param data A byte array containing the received chunk.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The length of the received chunk.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          file_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint64_t),
                                          position));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_LName length)))),
                                          data))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Conference management");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (conference,
                      [(ApiAst.Decl_Comment (
                          (ApiAst.Cmt_Doc
                             [ApiAst.Cmtf_Break;
                               (ApiAst.Cmtf_Doc " Conference types for the ");
                               (ApiAst.Cmtf_Var
                                  [ApiAst.Var_Event;
                                    (ApiAst.Var_LName invite)]);
                               (ApiAst.Cmtf_Doc " event.")]),
                          (ApiAst.Decl_Enum (ApiAst.Enum_Class, TYPE,
                             [(ApiAst.Enum_Name (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Text-only conferences that must be accepted with the ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_LName join)]);
                                      (ApiAst.Cmtf_Doc " function.")]),
                                 TEXT, None));
                               (ApiAst.Enum_Name (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Video conference. The function to accept these is in toxav.")
                                       ]),
                                  AV, None))
                               ]
                             ))
                          ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when the client is invited to join a conference.")
                                ]),
                           (ApiAst.Decl_Event (invite, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " The invitation will remain valid until the inviting friend goes offline");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " or exits the conference.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend who invited us.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param type The conference type (text only or audio/video).");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param cookie A piece of data of variable length required to join the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc "   conference.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The length of the cookie.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param ((ApiAst.Ty_UName TYPE),
                                          type));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_LName length)))),
                                          cookie))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when the client receives a conference message.")
                                ]),
                           (ApiAst.Decl_Event (message, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param conference_number The conference number of the conference the message is intended for.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param peer_number The ID of the peer who sent the message.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param type The type of message (normal, action, ...).");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param message The message data.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The length of the message.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         conference_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          peer_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_UName MESSAGE_TYPE),
                                          type));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_LName length)))),
                                          message))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when a peer changes the conference title.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " If peer_number == UINT32_MAX, then author is unknown (e.g. initial joining the conference).")
                                ]),
                           (ApiAst.Decl_Event (title, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param conference_number The conference number of the conference the title change is intended for.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param peer_number The ID of the peer who changed the title.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param title The title data.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The title length.")
                                       ]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         conference_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          peer_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_LName length)))),
                                          title))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Peer list state change types.")
                                ]),
                           (ApiAst.Decl_Enum (ApiAst.Enum_Class,
                              STATE_CHANGE,
                              [(ApiAst.Enum_Name (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " A peer has joined the conference.")
                                       ]),
                                  PEER_JOIN, None));
                                (ApiAst.Enum_Name (
                                   (ApiAst.Cmt_Doc
                                      [ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " A peer has exited the conference.")
                                        ]),
                                   PEER_EXIT, None));
                                (ApiAst.Enum_Name (
                                   (ApiAst.Cmt_Doc
                                      [ApiAst.Cmtf_Break;
                                        (ApiAst.Cmtf_Doc
                                           " A peer has changed their name.")
                                        ]),
                                   PEER_NAME_CHANGE, None))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This event is triggered when the peer list changes (name change, peer join, peer exit).")
                                ]),
                           (ApiAst.Decl_Event (namelist_change, true,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param conference_number The conference number of the conference the title change is intended for.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param peer_number The ID of the peer who changed the title.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param change The type of change (one of ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName STATE_CHANGE)]);
                                       (ApiAst.Cmtf_Doc ").")]),
                                  (ApiAst.Decl_Typedef (
                                     (ApiAst.Ty_LName void), cb,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         conference_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_LName uint32_t),
                                          peer_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_UName STATE_CHANGE),
                                          change))
                                       ]
                                     ))
                                  ))
                                ]
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " Creates a new conference.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This function creates a new text conference.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @return conference number on success, or UINT32_MAX on failure.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName uint32_t),
                              new, [],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The conference instance failed to initialize.")
                                          ]),
                                     INIT, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " This function deletes a conference.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param conference_number The conference number of the conference to be deleted.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " @return true on success.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                              delete,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  conference_number))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The conference number passed did not designate a valid conference.")
                                          ]),
                                     CONFERENCE_NOT_FOUND, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Namespace (peer,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Error codes for peer info queries.")
                                    ]),
                               (ApiAst.Decl_Error (query,
                                  [(ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The conference number passed did not designate a valid conference.")
                                           ]),
                                      CONFERENCE_NOT_FOUND, None));
                                    (ApiAst.Enum_Name (
                                       (ApiAst.Cmt_Doc
                                          [ApiAst.Cmtf_Break;
                                            (ApiAst.Cmtf_Doc
                                               " The peer number passed did not designate a valid peer.")
                                            ]),
                                       PEER_NOT_FOUND, None));
                                    (ApiAst.Enum_Name (
                                       (ApiAst.Cmt_Doc
                                          [ApiAst.Cmtf_Break;
                                            (ApiAst.Cmtf_Doc
                                               " The client is not connected to the conference.")
                                            ]),
                                       NO_CONNECTION, None))
                                    ]
                                  ))
                               ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Return the number of peers in the conference. Return value is unspecified on failure.")
                                     ]),
                                (ApiAst.Decl_Function (
                                   (ApiAst.Ty_Const
                                      (ApiAst.Ty_LName uint32_t)),
                                   count,
                                   [(ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       conference_number))
                                     ],
                                   (ApiAst.Err_From query)))
                                ));
                             (ApiAst.Decl_GetSet (
                                (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                   (ApiAst.Ss_LName size))),
                                name,
                                [(ApiAst.Decl_Comment (
                                    (ApiAst.Cmt_Doc
                                       [ApiAst.Cmtf_Break;
                                         (ApiAst.Cmtf_Doc
                                            " Return the length of the peer's name. Return value is unspecified on failure.")
                                         ]),
                                    (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                       size,
                                       [(ApiAst.Param (
                                           (ApiAst.Ty_LName uint32_t),
                                           conference_number));
                                         (ApiAst.Param (
                                            (ApiAst.Ty_LName uint32_t),
                                            peer_number))
                                         ],
                                       (ApiAst.Err_From query)))
                                    ));
                                  (ApiAst.Decl_Comment (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " Copy the name of peer_number who is in conference_number to name.");
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " name must be at least ");
                                          (ApiAst.Cmtf_Var
                                             [(ApiAst.Var_UName
                                                 MAX_NAME_LENGTH)
                                               ]);
                                          (ApiAst.Cmtf_Doc " long.");
                                          ApiAst.Cmtf_Break;
                                          ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " @return true on success.")
                                          ]),
                                     (ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                        get,
                                        [(ApiAst.Param (
                                            (ApiAst.Ty_LName uint32_t),
                                            conference_number));
                                          (ApiAst.Param (
                                             (ApiAst.Ty_LName uint32_t),
                                             peer_number))
                                          ],
                                        (ApiAst.Err_From query)))
                                     ))
                                  ]
                                ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Copy the public key of peer_number who is in conference_number to public_key.");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " public_key must be ");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                                     (ApiAst.Cmtf_Doc " long.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @return true on success.")
                                     ]),
                                (ApiAst.Decl_GetSet (
                                   (ApiAst.Ty_Array (
                                      (ApiAst.Ty_LName uint8_t),
                                      (ApiAst.Ss_UName PUBLIC_KEY_SIZE))),
                                   public_key,
                                   [(ApiAst.Decl_Function (ApiAst.Ty_Auto,
                                       get,
                                       [(ApiAst.Param (
                                           (ApiAst.Ty_LName uint32_t),
                                           conference_number));
                                         (ApiAst.Param (
                                            (ApiAst.Ty_LName uint32_t),
                                            peer_number))
                                         ],
                                       (ApiAst.Err_From query)))
                                     ]
                                   ))
                                ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Return true if passed peer_number corresponds to our own.")
                                     ]),
                                (ApiAst.Decl_Function (
                                   (ApiAst.Ty_Const (ApiAst.Ty_LName bool)),
                                   number_is_ours,
                                   [(ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       conference_number));
                                     (ApiAst.Param (
                                        (ApiAst.Ty_LName uint32_t),
                                        peer_number))
                                     ],
                                   (ApiAst.Err_From query)))
                                ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Invites a friend to a conference.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param friend_number The friend number of the friend we want to invite.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param conference_number The conference number of the conference we want to invite the friend to.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " @return true on success.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                              invite,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number));
                                (ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                   conference_number))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The conference number passed did not designate a valid conference.")
                                          ]),
                                     CONFERENCE_NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The invite packet failed to send.")
                                           ]),
                                      FAIL_SEND, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Joins a conference that the client has been invited to.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param friend_number The friend number of the friend who sent the invite.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param cookie Received via the `");
                                (ApiAst.Cmtf_Var
                                   [ApiAst.Var_Event;
                                     (ApiAst.Var_LName invite)]);
                                (ApiAst.Cmtf_Doc "` event.");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @param length The size of cookie.");
                                ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " @return conference number on success, UINT32_MAX on failure.")
                                ]),
                           (ApiAst.Decl_Function ((ApiAst.Ty_LName uint32_t),
                              join,
                              [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                  friend_number));
                                (ApiAst.Param (
                                   (ApiAst.Ty_Const
                                      (ApiAst.Ty_Array (
                                         (ApiAst.Ty_LName uint8_t),
                                         (ApiAst.Ss_LName length)))),
                                   cookie))
                                ],
                              (ApiAst.Err_List
                                 [(ApiAst.Enum_Name (
                                     (ApiAst.Cmt_Doc
                                        [ApiAst.Cmtf_Break;
                                          (ApiAst.Cmtf_Doc
                                             " The cookie passed has an invalid length.")
                                          ]),
                                     INVALID_LENGTH, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The conference is not the expected type. This indicates an invalid cookie.")
                                           ]),
                                      WRONG_TYPE, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The friend number passed does not designate a valid friend.")
                                           ]),
                                      FRIEND_NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Client is already in this conference.")
                                           ]),
                                      DUPLICATE, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Conference instance failed to initialize.")
                                           ]),
                                      INIT_FAIL, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The join packet failed to send.")
                                           ]),
                                      FAIL_SEND, None))
                                   ])
                              ))
                           ));
                        (ApiAst.Decl_Namespace (send,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Send a text chat message to the conference.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " This function creates a conference message packet and pushes it into the send");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " queue.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " The message length may not exceed ");
                                    (ApiAst.Cmtf_Var
                                       [(ApiAst.Var_UName MAX_MESSAGE_LENGTH)
                                         ]);
                                    (ApiAst.Cmtf_Doc ". Larger messages");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " must be split by the client and sent as separate messages. Other clients can");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " then reassemble the fragments.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param conference_number The conference number of the conference the message is intended for.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param type Message type (normal, action, ...).");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param message A non-NULL pointer to the first element of a byte array");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       "   containing the message text.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param length Length of the message to be sent.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @return true on success.")
                                    ]),
                               (ApiAst.Decl_Function ((ApiAst.Ty_LName bool),
                                  message,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      conference_number));
                                    (ApiAst.Param (
                                       (ApiAst.Ty_UName MESSAGE_TYPE), type));
                                    (ApiAst.Param (
                                       (ApiAst.Ty_Const
                                          (ApiAst.Ty_Array (
                                             (ApiAst.Ty_LName uint8_t),
                                             (ApiAst.Ss_LName length)))),
                                       message))
                                    ],
                                  (ApiAst.Err_List
                                     [(ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " The conference number passed did not designate a valid conference.")
                                              ]),
                                         CONFERENCE_NOT_FOUND, None));
                                       (ApiAst.Enum_Name (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The message is too long.")
                                               ]),
                                          TOO_LONG, None));
                                       (ApiAst.Enum_Name (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The client is not connected to the conference.")
                                               ]),
                                          NO_CONNECTION, None));
                                       (ApiAst.Enum_Name (
                                          (ApiAst.Cmt_Doc
                                             [ApiAst.Cmtf_Break;
                                               (ApiAst.Cmtf_Doc
                                                  " The message packet failed to send.")
                                               ]),
                                          FAIL_SEND, None))
                                       ])
                                  ))
                               ))
                             ]
                           ));
                        (ApiAst.Decl_Error (title,
                           [(ApiAst.Enum_Name (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " The conference number passed did not designate a valid conference.")
                                    ]),
                               CONFERENCE_NOT_FOUND, None));
                             (ApiAst.Enum_Name (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " The title is too long or empty.")
                                     ]),
                                INVALID_LENGTH, None));
                             (ApiAst.Enum_Name (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " The title packet failed to send.")
                                     ]),
                                FAIL_SEND, None))
                             ]
                           ));
                        (ApiAst.Decl_GetSet (
                           (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                              (ApiAst.Ss_Bounded (length, MAX_NAME_LENGTH)))),
                           title,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Return the length of the conference title. Return value is unspecified on failure.");
                                    ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " The return value is equal to the `length` argument received by the last");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc " `");
                                    (ApiAst.Cmtf_Var
                                       [ApiAst.Var_Event;
                                         (ApiAst.Var_LName title)]);
                                    (ApiAst.Cmtf_Doc "` callback.")]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, size,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      conference_number))
                                    ],
                                  (ApiAst.Err_From title)))
                               ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Write the title designated by the given conference number to a byte array.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " Call ");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_LName size)]);
                                     (ApiAst.Cmtf_Doc
                                        " to determine the allocation size for the `title` parameter.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " The data written to `title` is equal to the data received by the last");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc " `");
                                     (ApiAst.Cmtf_Var
                                        [ApiAst.Var_Event;
                                          (ApiAst.Var_LName title)]);
                                     (ApiAst.Cmtf_Doc "` callback.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @param title A valid memory region large enough to store the title.");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        "   If this parameter is NULL, this function has no effect.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @return true on success.")
                                     ]),
                                (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                   [(ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       conference_number))
                                     ],
                                   (ApiAst.Err_From title)))
                                ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Set the conference title and broadcast it to the rest of the conference.");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Title length cannot be longer than ");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_UName MAX_NAME_LENGTH)]);
                                     (ApiAst.Cmtf_Doc ".");
                                     ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " @return true on success.")
                                     ]),
                                (ApiAst.Decl_Function (ApiAst.Ty_Auto, set,
                                   [(ApiAst.Param (
                                       (ApiAst.Ty_LName uint32_t),
                                       conference_number))
                                     ],
                                   (ApiAst.Err_From title)))
                                ))
                             ]
                           ));
                        (ApiAst.Decl_GetSet (
                           (ApiAst.Ty_Array ((ApiAst.Ty_LName uint32_t),
                              (ApiAst.Ss_LName size))),
                           chatlist,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " Return the number of conferences in the Tox instance.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " This should be used to determine how much memory to allocate for `");
                                    (ApiAst.Cmtf_Var [(ApiAst.Var_LName get)]);
                                    (ApiAst.Cmtf_Doc "`.")]),
                               (ApiAst.Decl_Function (ApiAst.Ty_Auto, size,
                                  [], ApiAst.Err_None))
                               ));
                             (ApiAst.Decl_Comment (
                                (ApiAst.Cmt_Doc
                                   [ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " Copy a list of valid conference IDs into the array chatlist. Determine how much space");
                                     ApiAst.Cmtf_Break;
                                     (ApiAst.Cmtf_Doc
                                        " to allocate for the array with the `");
                                     (ApiAst.Cmtf_Var
                                        [(ApiAst.Var_LName size)]);
                                     (ApiAst.Cmtf_Doc "` function.")]),
                                (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                   [], ApiAst.Err_None))
                                ))
                             ]
                           ));
                        (ApiAst.Decl_Comment (
                           (ApiAst.Cmt_Doc
                              [ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc
                                   " Returns the type of conference (");
                                (ApiAst.Cmtf_Var [(ApiAst.Var_UName TYPE)]);
                                (ApiAst.Cmtf_Doc
                                   ") that conference_number is. Return value is");
                                ApiAst.Cmtf_Break;
                                (ApiAst.Cmtf_Doc " unspecified on failure.")]),
                           (ApiAst.Decl_GetSet ((ApiAst.Ty_UName TYPE), type,
                              [(ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      conference_number))
                                    ],
                                  (ApiAst.Err_List
                                     [(ApiAst.Enum_Name (
                                         (ApiAst.Cmt_Doc
                                            [ApiAst.Cmtf_Break;
                                              (ApiAst.Cmtf_Doc
                                                 " The conference number passed did not designate a valid conference.")
                                              ]),
                                         CONFERENCE_NOT_FOUND, None))
                                       ])
                                  ))
                                ]
                              ))
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc
                           " :: Low-level custom packet sending and receiving");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Namespace (friend,
                      [(ApiAst.Decl_Inline
                          (ApiAst.Decl_Namespace (send,
                             [(ApiAst.Decl_Error (custom_packet,
                                 [(ApiAst.Enum_Name (ApiAst.Cmt_None, NULL,
                                     None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The friend number did not designate a valid friend.")
                                           ]),
                                      FRIEND_NOT_FOUND, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " This client is currently not connected to the friend.")
                                           ]),
                                      FRIEND_NOT_CONNECTED, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " The first byte of data was not in the specified range for the packet type.");
                                           ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " This range is 200-254 for lossy, and 160-191 for lossless packets.")
                                           ]),
                                      INVALID, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Attempted to send an empty packet.")
                                           ]),
                                      EMPTY, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Packet data length exceeded ");
                                           (ApiAst.Cmtf_Var
                                              [(ApiAst.Var_UName
                                                  MAX_CUSTOM_PACKET_SIZE)
                                                ]);
                                           (ApiAst.Cmtf_Doc ".")]),
                                      TOO_LONG, None));
                                   (ApiAst.Enum_Name (
                                      (ApiAst.Cmt_Doc
                                         [ApiAst.Cmtf_Break;
                                           (ApiAst.Cmtf_Doc
                                              " Packet queue is full.")
                                           ]),
                                      SENDQ, None))
                                   ]
                                 ));
                               (ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Send a custom lossy packet to a friend.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " The first byte of data must be in the range 200-254. Maximum length of a");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " custom packet is ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName
                                              MAX_CUSTOM_PACKET_SIZE)
                                            ]);
                                       (ApiAst.Cmtf_Doc ".");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Lossy packets behave like UDP packets, meaning they might never reach the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " other side or might arrive more than once (if someone is messing with the");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " connection) or might arrive in the wrong order.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Unless latency is an issue, it is recommended that you use lossless custom");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " packets instead.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend this lossy packet");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   should be sent to.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param data A byte array containing the packet data.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The length of the packet data byte array.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @return true on success.")
                                       ]),
                                  (ApiAst.Decl_Function (
                                     (ApiAst.Ty_LName bool), lossy_packet,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_Bounded (length,
                                                   MAX_CUSTOM_PACKET_SIZE))
                                                ))),
                                          data))
                                       ],
                                     (ApiAst.Err_From custom_packet)))
                                  ));
                               (ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Send a custom lossless packet to a friend.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " The first byte of data must be in the range 160-191. Maximum length of a");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc " custom packet is ");
                                       (ApiAst.Cmtf_Var
                                          [(ApiAst.Var_UName
                                              MAX_CUSTOM_PACKET_SIZE)
                                            ]);
                                       (ApiAst.Cmtf_Doc ".");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Lossless packet behaviour is comparable to TCP (reliability, arrive in order)");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " but with packets instead of a stream.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param friend_number The friend number of the friend this lossless packet");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          "   should be sent to.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param data A byte array containing the packet data.");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @param length The length of the packet data byte array.");
                                       ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " @return true on success.")
                                       ]),
                                  (ApiAst.Decl_Function (
                                     (ApiAst.Ty_LName bool), lossless_packet,
                                     [(ApiAst.Param (
                                         (ApiAst.Ty_LName uint32_t),
                                         friend_number));
                                       (ApiAst.Param (
                                          (ApiAst.Ty_Const
                                             (ApiAst.Ty_Array (
                                                (ApiAst.Ty_LName uint8_t),
                                                (ApiAst.Ss_Bounded (length,
                                                   MAX_CUSTOM_PACKET_SIZE))
                                                ))),
                                          data))
                                       ],
                                     (ApiAst.Err_From custom_packet)))
                                  ))
                               ]
                             )));
                        (ApiAst.Decl_Event (lossy_packet, true,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param friend_number The friend number of the friend who sent a lossy packet.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param data A byte array containing the received packet data.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param length The length of the packet data byte array.")
                                    ]),
                               (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                  cb,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number));
                                    (ApiAst.Param (
                                       (ApiAst.Ty_Const
                                          (ApiAst.Ty_Array (
                                             (ApiAst.Ty_LName uint8_t),
                                             (ApiAst.Ss_Bounded (length,
                                                MAX_CUSTOM_PACKET_SIZE))
                                             ))),
                                       data))
                                    ]
                                  ))
                               ))
                             ]
                           ));
                        (ApiAst.Decl_Event (lossless_packet, true,
                           [(ApiAst.Decl_Comment (
                               (ApiAst.Cmt_Doc
                                  [ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param friend_number The friend number of the friend who sent the packet.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param data A byte array containing the received packet data.");
                                    ApiAst.Cmtf_Break;
                                    (ApiAst.Cmtf_Doc
                                       " @param length The length of the packet data byte array.")
                                    ]),
                               (ApiAst.Decl_Typedef ((ApiAst.Ty_LName void),
                                  cb,
                                  [(ApiAst.Param ((ApiAst.Ty_LName uint32_t),
                                      friend_number));
                                    (ApiAst.Param (
                                       (ApiAst.Ty_Const
                                          (ApiAst.Ty_Array (
                                             (ApiAst.Ty_LName uint8_t),
                                             (ApiAst.Ss_Bounded (length,
                                                MAX_CUSTOM_PACKET_SIZE))
                                             ))),
                                       data))
                                    ]
                                  ))
                               ))
                             ]
                           ))
                        ]
                      ));
                   (ApiAst.Decl_Section
                      [ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                        (ApiAst.Cmtf_Doc " :: Low-level network information");
                        ApiAst.Cmtf_Break]);
                   (ApiAst.Decl_Inline
                      (ApiAst.Decl_Namespace (self,
                         [(ApiAst.Decl_GetSet (
                             (ApiAst.Ty_Array ((ApiAst.Ty_LName uint8_t),
                                (ApiAst.Ss_UName PUBLIC_KEY_SIZE))),
                             dht_id,
                             [(ApiAst.Decl_Comment (
                                 (ApiAst.Cmt_Doc
                                    [ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Writes the temporary DHT public key of this instance to a byte array.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " This can be used in combination with an externally accessible IP address and");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " the bound port (from ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_LName udp_port);
                                           (ApiAst.Var_LName get)]);
                                      (ApiAst.Cmtf_Doc
                                         ") to run a temporary bootstrap node.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " Be aware that every time a new instance is created, the DHT public key");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " changes, meaning this cannot be used to run a permanent bootstrap node.");
                                      ApiAst.Cmtf_Break; ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         " @param dht_id A memory region of at least ");
                                      (ApiAst.Cmtf_Var
                                         [(ApiAst.Var_UName PUBLIC_KEY_SIZE)]);
                                      (ApiAst.Cmtf_Doc " bytes. If this");
                                      ApiAst.Cmtf_Break;
                                      (ApiAst.Cmtf_Doc
                                         "   parameter is NULL, this function has no effect.")
                                      ]),
                                 (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                    [], ApiAst.Err_None))
                                 ))
                               ]
                             ));
                           (ApiAst.Decl_Error (get_port,
                              [(ApiAst.Enum_Name (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " The instance was not bound to any port.")
                                       ]),
                                  NOT_BOUND, None))
                                ]
                              ));
                           (ApiAst.Decl_GetSet ((ApiAst.Ty_LName uint16_t),
                              udp_port,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Return the UDP port this Tox instance is bound to.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                     [], (ApiAst.Err_From get_port)))
                                  ))
                                ]
                              ));
                           (ApiAst.Decl_GetSet ((ApiAst.Ty_LName uint16_t),
                              tcp_port,
                              [(ApiAst.Decl_Comment (
                                  (ApiAst.Cmt_Doc
                                     [ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " Return the TCP port this Tox instance is bound to. This is only relevant if");
                                       ApiAst.Cmtf_Break;
                                       (ApiAst.Cmtf_Doc
                                          " the instance is acting as a TCP relay.")
                                       ]),
                                  (ApiAst.Decl_Function (ApiAst.Ty_Auto, get,
                                     [], (ApiAst.Err_From get_port)))
                                  ))
                                ]
                              ))
                           ]
                         )))
                   ]
                 ))
              ))
           ))
        ))
     ],
   (Some "#ifdef __cplusplus\n}\n#endif\n\n#endif")))
